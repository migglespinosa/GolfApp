{"ast":null,"code":"import _assign from \"lodash/assign\";\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* eslint-disable max-statements */\n\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helpers, CommonProps, Line } from \"victory-core\";\n\nvar renderBorder = function (props, error, type) {\n  var vertical = type === \"right\" || type === \"left\";\n  return React.cloneElement(props.lineComponent, _objectSpread({}, props.events, {\n    role: props.role,\n    shapeRendering: props.shapeRendering,\n    className: props.className,\n    style: props.style,\n    transform: props.transform,\n    key: \"\".concat(props.id, \"-border-\").concat(type),\n    x1: vertical ? error[type] : props.x - props.borderWidth,\n    x2: vertical ? error[type] : props.x + props.borderWidth,\n    y1: vertical ? props.y - props.borderWidth : error[type],\n    y2: vertical ? props.y + props.borderWidth : error[type]\n  }));\n};\n\nvar renderCross = function (props, error, type) {\n  var vertical = type === \"top\" || type === \"bottom\";\n  return React.cloneElement(props.lineComponent, _objectSpread({}, props.events, {\n    role: props.role,\n    shapeRendering: props.shapeRendering,\n    className: props.className,\n    style: props.style,\n    transform: props.transform,\n    key: \"\".concat(props.id, \"-cross-\").concat(type),\n    x1: props.x,\n    x2: vertical ? props.x : error[type],\n    y1: props.y,\n    y2: vertical ? error[type] : props.y\n  }));\n};\n\nvar calculateError = function (props) {\n  var errorX = props.errorX,\n      errorY = props.errorY;\n  var settings = {\n    right: {\n      error: errorX,\n      errorIndex: 0\n    },\n    left: {\n      error: errorX,\n      errorIndex: 1\n    },\n    top: {\n      error: errorY,\n      errorIndex: 1\n    },\n    bottom: {\n      error: errorY,\n      errorIndex: 0\n    }\n  };\n\n  var getError = function (direction) {\n    var _settings$direction = settings[direction],\n        error = _settings$direction.error,\n        errorIndex = _settings$direction.errorIndex;\n    return error ? error[errorIndex] : undefined;\n  };\n\n  var result = [\"right\", \"left\", \"top\", \"bottom\"].reduce(function (memo, dir) {\n    memo[dir] = getError(dir);\n    return memo;\n  }, {});\n  return result;\n};\n\nvar ErrorBar = function (props) {\n  var style = Helpers.evaluateStyle(_assign({\n    stroke: \"black\"\n  }, props.style), props);\n  props = _assign({}, props, {\n    style: style\n  });\n  var error = calculateError(props);\n  var children = [error.right ? renderBorder(props, error, \"right\") : null, error.left ? renderBorder(props, error, \"left\") : null, error.bottom ? renderBorder(props, error, \"bottom\") : null, error.top ? renderBorder(props, error, \"top\") : null, error.right ? renderCross(props, error, \"right\") : null, error.left ? renderCross(props, error, \"left\") : null, error.bottom ? renderCross(props, error, \"bottom\") : null, error.top ? renderCross(props, error, \"top\") : null].filter(Boolean);\n  return React.cloneElement(props.groupComponent, {}, children);\n};\n\nErrorBar.propTypes = _objectSpread({}, CommonProps.primitiveProps, {\n  borderWidth: PropTypes.number,\n  datum: PropTypes.object,\n  errorX: PropTypes.oneOfType([PropTypes.number, PropTypes.array, PropTypes.bool]),\n  errorY: PropTypes.oneOfType([PropTypes.number, PropTypes.array, PropTypes.bool]),\n  groupComponent: PropTypes.element,\n  lineComponent: PropTypes.element,\n  x: PropTypes.number,\n  y: PropTypes.number\n});\nErrorBar.defaultProps = {\n  groupComponent: React.createElement(\"g\", null),\n  lineComponent: React.createElement(Line, null),\n  role: \"presentation\",\n  shapeRendering: \"auto\"\n};\nexport default ErrorBar;","map":null,"metadata":{},"sourceType":"module"}