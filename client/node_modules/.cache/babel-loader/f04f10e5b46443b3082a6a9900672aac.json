{"ast":null,"code":"import _isPlainObject from \"lodash/isPlainObject\";\nimport _isFunction from \"lodash/isFunction\";\nimport _isNil from \"lodash/isNil\";\nimport _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\nimport { Helpers, Scale, Domain, Data, LabelHelpers } from \"victory-core\";\nvar TYPES = [\"close\", \"open\", \"high\", \"low\"];\n\nvar getData = function (props) {\n  var accessorTypes = [\"x\", \"high\", \"low\", \"close\", \"open\"];\n  return Data.formatData(props.data, props, accessorTypes);\n};\n\nvar reduceData = function (dataset, axis, type) {\n  var yDataTypes = {\n    min: \"_low\",\n    max: \"_high\"\n  };\n  var dataType = axis === \"x\" ? \"_x\" : yDataTypes[type];\n  var baseCondition = type === \"min\" ? Infinity : -Infinity;\n  return dataset.reduce(function (memo, datum) {\n    var current = datum[dataType];\n    return memo < current && type === \"min\" || memo > current && type === \"max\" ? memo : current;\n  }, baseCondition);\n};\n\nvar getDomainFromData = function (props, axis) {\n  var minDomain = Domain.getMinFromProps(props, axis);\n  var maxDomain = Domain.getMaxFromProps(props, axis);\n  var dataset = getData(props);\n\n  if (dataset.length < 1) {\n    return minDomain !== undefined && maxDomain !== undefined ? Domain.getDomainFromMinMax(minDomain, maxDomain) : undefined;\n  }\n\n  var min = minDomain !== undefined ? minDomain : reduceData(dataset, axis, \"min\");\n  var max = maxDomain !== undefined ? maxDomain : reduceData(dataset, axis, \"max\");\n  return Domain.getDomainFromMinMax(min, max);\n};\n\nvar getDomain = function (props, axis) {\n  return Domain.createDomainFunction(getDomainFromData)(props, axis);\n};\n\nvar getStyles = function (style) {\n  var defaultStyles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var width = \"100%\";\n  var height = \"100%\";\n\n  if (!style) {\n    return _defaults({\n      parent: {\n        height: height,\n        width: width\n      }\n    }, defaultStyles);\n  }\n\n  var defaultParent = defaultStyles.parent || {};\n  var defaultLabels = defaultStyles.labels || {};\n  var defaultData = defaultStyles.data || {};\n\n  var labelStyle = _defaults({}, style.labels, defaultLabels);\n\n  return {\n    parent: _defaults({}, style.parent, defaultParent, {\n      width: width,\n      height: height\n    }),\n    labels: labelStyle,\n    data: _defaults({}, style.data, defaultData),\n    openLabels: _defaults({}, style.openLabels, defaultStyles.openLabels, labelStyle),\n    closeLabels: _defaults({}, style.closeLabels, defaultStyles.closeLabels, labelStyle),\n    lowLabels: _defaults({}, style.lowLabels, defaultStyles.lowLabels, labelStyle),\n    highLabels: _defaults({}, style.highLabels, defaultStyles.highLabels, labelStyle)\n  };\n};\n\nvar getCalculatedValues = function (props) {\n  var theme = props.theme,\n      polar = props.polar;\n  var defaultStyle = theme && theme.candlestick && theme.candlestick.style ? theme.candlestick.style : {};\n  var style = getStyles(props.style, defaultStyle);\n  var data = getData(props);\n  var range = {\n    x: Helpers.getRange(props, \"x\"),\n    y: Helpers.getRange(props, \"y\")\n  };\n  var domain = {\n    x: getDomain(props, \"x\"),\n    y: getDomain(props, \"y\")\n  };\n  var scale = {\n    x: Scale.getBaseScale(props, \"x\").domain(domain.x).range(props.horizontal ? range.y : range.x),\n    y: Scale.getBaseScale(props, \"y\").domain(domain.y).range(props.horizontal ? range.x : range.y)\n  };\n  var origin = polar ? props.origin || Helpers.getPolarOrigin(props) : undefined;\n  var defaultOrientation = props.horizontal ? \"top\" : \"right\";\n  var labelOrientation = props.labelOrientation || defaultOrientation;\n  return {\n    domain: domain,\n    data: data,\n    scale: scale,\n    style: style,\n    origin: origin,\n    labelOrientation: labelOrientation\n  };\n};\n\nvar isTransparent = function (attr) {\n  return attr === \"none\" || attr === \"transparent\";\n};\n\nvar getDataStyles = function (datum, style, props) {\n  style = style || {};\n  var candleColor = datum._open > datum._close ? props.candleColors.negative : props.candleColors.positive;\n  var fill = style.fill || candleColor;\n  var strokeColor = style.stroke;\n  var stroke = isTransparent(strokeColor) ? fill : strokeColor || \"black\";\n  return _assign({}, style, {\n    stroke: stroke,\n    fill: fill\n  });\n};\n\nvar getText = function (props, type) {\n  var datum = props.datum,\n      index = props.index,\n      labels = props.labels;\n  var propName = \"\".concat(type, \"Labels\");\n  var labelProp = props[propName];\n\n  if (!labelProp && !labels) {\n    return null;\n  } else if (labelProp === true || labels === true) {\n    var dataName = \"_\".concat(type);\n    return \"\".concat(datum[dataName]);\n  }\n\n  return Array.isArray(labelProp) ? labelProp[index] : labelProp;\n};\n\nvar getCandleWidth = function (props, style) {\n  var data = props.data,\n      candleWidth = props.candleWidth,\n      scale = props.scale,\n      defaultCandleWidth = props.defaultCandleWidth;\n\n  if (candleWidth) {\n    return _isFunction(candleWidth) ? Helpers.evaluateProp(candleWidth, props) : candleWidth;\n  } else if (style && style.width) {\n    return style.width;\n  }\n\n  var range = scale.x.range();\n  var extent = Math.abs(range[1] - range[0]);\n  var candles = data.length + 2;\n  var candleRatio = props.candleRatio || 0.5;\n  var defaultWidth = candleRatio * (data.length < 2 ? defaultCandleWidth : extent / candles);\n  return Math.max(1, defaultWidth);\n};\n\nvar getOrientation = function (labelOrientation) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"labels\";\n  return _isPlainObject(labelOrientation) ? labelOrientation[type] : labelOrientation;\n};\n/* eslint-disable complexity*/\n\n\nvar calculatePlotValues = function (props) {\n  var positions = props.positions,\n      labelStyle = props.labelStyle,\n      x = props.x,\n      horizontal = props.horizontal,\n      computedType = props.computedType,\n      candleWidth = props.candleWidth,\n      orientation = props.orientation;\n  positions.labels = (positions.open + positions.close) / 2;\n  var signX = orientation === \"left\" ? -1 : 1;\n  var signY = orientation === \"top\" ? -1 : 1;\n\n  if (horizontal) {\n    var yValue = x;\n    var xValue = positions[computedType];\n    var dy = orientation === \"top\" || orientation === \"bottom\" ? signY * (candleWidth / 2) + signY * (labelStyle.padding || 0) : 0;\n    var dx = orientation === \"top\" || orientation === \"bottom\" ? 0 : signX * (labelStyle.padding || 1);\n    return {\n      yValue: yValue,\n      xValue: xValue,\n      dx: dx,\n      dy: dy\n    };\n  } else {\n    var _xValue = x;\n    var _yValue = positions[computedType];\n\n    var _dy = orientation === \"top\" || orientation === \"bottom\" ? signY * (labelStyle.padding || 1) : 0;\n\n    var _dx = orientation === \"top\" || orientation === \"bottom\" ? 0 : signX * (candleWidth / 2) + signX * (labelStyle.padding || 0);\n\n    return {\n      yValue: _yValue,\n      xValue: _xValue,\n      dx: _dx,\n      dy: _dy\n    };\n  }\n};\n/* eslint-enable complexity*/\n\n/* eslint-disable max-params*/\n\n\nvar getLabelProps = function (props, text, style, type) {\n  var x = props.x,\n      high = props.high,\n      low = props.low,\n      open = props.open,\n      close = props.close,\n      index = props.index,\n      scale = props.scale,\n      datum = props.datum,\n      data = props.data,\n      horizontal = props.horizontal,\n      candleWidth = props.candleWidth,\n      labelOrientation = props.labelOrientation;\n  var component = props[\"\".concat(type, \"LabelComponent\")] || props.labelComponent;\n  var defaultOrientation = horizontal ? \"top\" : \"right\";\n  var orientation = component.props && component.props.orientation || getOrientation(labelOrientation, type) || defaultOrientation;\n  var positions = {\n    high: high,\n    low: low,\n    open: open,\n    close: close\n  };\n  var namespace = type ? \"\".concat(type, \"Labels\") : \"labels\";\n  var labelStyle = style[namespace] || style.labels;\n  var defaultVerticalAnchors = {\n    top: \"end\",\n    bottom: \"start\",\n    left: \"middle\",\n    right: \"middle\"\n  };\n  var defaultTextAnchors = {\n    left: \"end\",\n    right: \"start\",\n    top: \"middle\",\n    bottom: \"middle\"\n  };\n  var computedType = type ? type : \"labels\";\n  var plotProps = {\n    positions: positions,\n    labelStyle: labelStyle,\n    x: x,\n    horizontal: horizontal,\n    computedType: computedType,\n    candleWidth: candleWidth,\n    orientation: orientation\n  };\n\n  var _calculatePlotValues = calculatePlotValues(plotProps),\n      yValue = _calculatePlotValues.yValue,\n      xValue = _calculatePlotValues.xValue,\n      dx = _calculatePlotValues.dx,\n      dy = _calculatePlotValues.dy;\n\n  return {\n    style: labelStyle,\n    y: yValue,\n    x: xValue,\n    dx: dx,\n    dy: dy,\n    text: text,\n    index: index,\n    scale: scale,\n    datum: datum,\n    data: data,\n    orientation: orientation,\n    textAnchor: labelStyle.textAnchor || defaultTextAnchors[orientation],\n    verticalAnchor: labelStyle.verticalAnchor || defaultVerticalAnchors[orientation],\n    angle: labelStyle.angle,\n    horizontal: horizontal\n  };\n};\n/* eslint-enable max-params*/\n\n\nvar getBaseProps = function (props, fallbackProps) {\n  // eslint-disable-line max-statements\n  props = Helpers.modifyProps(props, fallbackProps, \"candlestick\");\n  var calculatedValues = getCalculatedValues(props);\n  var data = calculatedValues.data,\n      style = calculatedValues.style,\n      scale = calculatedValues.scale,\n      domain = calculatedValues.domain,\n      origin = calculatedValues.origin,\n      labelOrientation = calculatedValues.labelOrientation;\n  var _props = props,\n      groupComponent = _props.groupComponent,\n      width = _props.width,\n      height = _props.height,\n      padding = _props.padding,\n      standalone = _props.standalone,\n      name = _props.name,\n      candleWidth = _props.candleWidth,\n      candleRatio = _props.candleRatio,\n      theme = _props.theme,\n      polar = _props.polar,\n      wickStrokeWidth = _props.wickStrokeWidth,\n      labels = _props.labels,\n      events = _props.events,\n      sharedEvents = _props.sharedEvents,\n      horizontal = _props.horizontal;\n  var initialChildProps = {\n    parent: {\n      domain: domain,\n      scale: scale,\n      width: width,\n      height: height,\n      data: data,\n      standalone: standalone,\n      theme: theme,\n      polar: polar,\n      origin: origin,\n      name: name,\n      style: style.parent,\n      padding: padding,\n      horizontal: horizontal\n    }\n  };\n  return data.reduce(function (childProps, datum, index) {\n    var eventKey = !_isNil(datum.eventKey) ? datum.eventKey : index;\n    var x = scale.x(datum._x1 !== undefined ? datum._x1 : datum._x);\n    var high = scale.y(datum._high);\n    var close = scale.y(datum._close);\n    var open = scale.y(datum._open);\n    var low = scale.y(datum._low);\n    var dataStyle = getDataStyles(datum, style.data, props);\n    var dataProps = {\n      x: x,\n      high: high,\n      low: low,\n      candleWidth: candleWidth,\n      candleRatio: candleRatio,\n      scale: scale,\n      data: data,\n      datum: datum,\n      groupComponent: groupComponent,\n      index: index,\n      style: dataStyle,\n      width: width,\n      polar: polar,\n      origin: origin,\n      wickStrokeWidth: wickStrokeWidth,\n      open: open,\n      close: close,\n      horizontal: horizontal,\n      labelOrientation: labelOrientation\n    };\n    dataProps.candleWidth = getCandleWidth(dataProps);\n\n    var extendedProps = _defaults(Object.assign({}, dataProps), props);\n\n    childProps[eventKey] = {\n      data: dataProps\n    };\n\n    if (labels) {\n      var text = LabelHelpers.getText(props, datum, index);\n\n      if (text !== undefined && text !== null || labels && (events || sharedEvents)) {\n        childProps[eventKey].labels = getLabelProps(extendedProps, text, style);\n      }\n    }\n\n    TYPES.forEach(function (type) {\n      var labelText = getText(extendedProps, type);\n      var labelProp = props.labels || props[\"\".concat(type, \"Labels\")];\n\n      if (labelText !== null && labelText !== undefined || labelProp && (events || sharedEvents)) {\n        var target = \"\".concat(type, \"Labels\");\n        childProps[eventKey][target] = getLabelProps(extendedProps, labelText, style, type);\n      }\n    });\n    return childProps;\n  }, initialChildProps);\n};\n\nexport { getBaseProps, getDomain, getData };","map":null,"metadata":{},"sourceType":"module"}