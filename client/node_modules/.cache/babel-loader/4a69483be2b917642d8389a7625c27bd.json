{"ast":null,"code":"import _assign from \"lodash/assign\";\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helpers from \"../victory-util/helpers\";\nimport CommonProps from \"../victory-util/common-props\";\nimport Line from \"./line\";\n\nvar Whisker = function (props) {\n  var groupComponent = props.groupComponent,\n      lineComponent = props.lineComponent,\n      events = props.events,\n      className = props.className,\n      majorWhisker = props.majorWhisker,\n      minorWhisker = props.minorWhisker,\n      transform = props.transform,\n      clipPath = props.clipPath,\n      role = props.role,\n      shapeRendering = props.shapeRendering;\n\n  var baseProps = _objectSpread({}, events, {\n    style: Helpers.evaluateStyle(props.style, props),\n    desc: Helpers.evaluateProp(props.desc, props),\n    tabIndex: Helpers.evaluateProp(props.tabIndex, props),\n    className: className,\n    transform: transform,\n    clipPath: clipPath,\n    role: role,\n    shapeRendering: shapeRendering\n  });\n\n  return React.cloneElement(groupComponent, {}, [React.cloneElement(lineComponent, _assign({\n    key: \"major-whisker\"\n  }, baseProps, majorWhisker)), React.cloneElement(lineComponent, _assign({\n    key: \"minor-whisker\"\n  }, baseProps, minorWhisker))]);\n};\n\nWhisker.propTypes = _objectSpread({}, CommonProps.primitiveProps, {\n  groupComponent: PropTypes.element,\n  lineComponent: PropTypes.element,\n  majorWhisker: PropTypes.shape({\n    x1: PropTypes.number,\n    x2: PropTypes.number,\n    y1: PropTypes.number,\n    y2: PropTypes.number\n  }),\n  minorWhisker: PropTypes.shape({\n    x1: PropTypes.number,\n    x2: PropTypes.number,\n    y1: PropTypes.number,\n    y2: PropTypes.number\n  })\n});\nWhisker.defaultProps = {\n  groupComponent: React.createElement(\"g\", null),\n  lineComponent: React.createElement(Line, null),\n  role: \"presentation\",\n  shapeRendering: \"auto\"\n};\nexport default Whisker;","map":null,"metadata":{},"sourceType":"module"}