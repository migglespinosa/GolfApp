{"ast":null,"code":"import _isNil from \"lodash/isNil\";\nimport _assign from \"lodash/assign\";\nimport { Helpers, LabelHelpers, Scale, Domain, Data } from \"victory-core\";\n\nvar getErrors = function (props, datum, axis) {\n  /**\n   * check if it is asymmetric error or symmetric error, asymmetric error should be an array\n   * and the first value is the positive error, the second is the negative error\n   * @param  {Boolean} isArray(errorX)\n   * @return {String or Array}\n   */\n  var errorNames = {\n    x: \"_errorX\",\n    y: \"_errorY\"\n  };\n  var errors = datum[errorNames[axis]];\n\n  if (errors === 0) {\n    return false;\n  }\n\n  var scale = props.scale[axis];\n  return Array.isArray(errors) ? [errors[0] === 0 ? false : scale(errors[0] + datum[\"_\".concat(axis)]), errors[1] === 0 ? false : scale(datum[\"_\".concat(axis)] - errors[1])] : [scale(errors + datum[\"_\".concat(axis)]), scale(datum[\"_\".concat(axis)] - errors)];\n};\n\nvar getData = function (props) {\n  var accessorTypes = [\"x\", \"y\", \"errorX\", \"errorY\"];\n\n  if (props.data) {\n    return Data.formatData(props.data, props, accessorTypes);\n  } else {\n    var generatedData = props.errorX || props.errorY ? Data.generateData(props) : [];\n    return Data.formatData(generatedData, props, accessorTypes);\n  }\n};\n\nvar getDomainFromData = function (props, axis) {\n  var minDomain = Domain.getMinFromProps(props, axis);\n  var maxDomain = Domain.getMaxFromProps(props, axis);\n  var dataset = getData(props);\n\n  if (dataset.length < 1) {\n    return minDomain !== undefined && maxDomain !== undefined ? Domain.getDomainFromMinMax(minDomain, maxDomain) : undefined;\n  }\n\n  var error = axis === \"x\" ? \"_errorX\" : \"_errorY\";\n\n  var reduceErrorData = function (type) {\n    var baseCondition = type === \"min\" ? Infinity : -Infinity;\n    var errorIndex = type === \"min\" ? 1 : 0;\n    var sign = type === \"min\" ? -1 : 1;\n    return dataset.reduce(function (memo, datum) {\n      var currentError = Array.isArray(datum[error]) ? datum[error][errorIndex] : datum[error];\n      var current = datum[\"_\".concat(axis)] + sign * (currentError || 0);\n      return memo < current && type === \"min\" || memo > current && type === \"max\" ? memo : current;\n    }, baseCondition);\n  };\n\n  var min = minDomain !== undefined ? minDomain : reduceErrorData(\"min\");\n  var max = maxDomain !== undefined ? maxDomain : reduceErrorData(\"max\");\n  return Domain.getDomainFromMinMax(min, max);\n};\n\nvar getDomain = function (props, axis) {\n  return Domain.createDomainFunction(getDomainFromData)(props, axis);\n};\n\nvar getCalculatedValues = function (props) {\n  var defaultStyles = props.theme && props.theme.errorbar && props.theme.errorbar.style ? props.theme.errorbar.style : {};\n  var style = Helpers.getStyles(props.style, defaultStyles) || {};\n  var data = getData(props);\n  var range = {\n    x: Helpers.getRange(props, \"x\"),\n    y: Helpers.getRange(props, \"y\")\n  };\n  var domain = {\n    x: getDomain(props, \"x\"),\n    y: getDomain(props, \"y\")\n  };\n  var scale = {\n    x: Scale.getBaseScale(props, \"x\").domain(domain.x).range(props.horizontal ? range.y : range.x),\n    y: Scale.getBaseScale(props, \"y\").domain(domain.y).range(props.horizontal ? range.x : range.y)\n  };\n  var origin = props.polar ? props.origin || Helpers.getPolarOrigin(props) : undefined;\n  return {\n    domain: domain,\n    data: data,\n    scale: scale,\n    style: style,\n    origin: origin\n  };\n};\n\nvar getLabelProps = function (dataProps, text, style) {\n  var x = dataProps.x,\n      y = dataProps.y,\n      index = dataProps.index,\n      scale = dataProps.scale,\n      errorY = dataProps.errorY,\n      errorX = dataProps.errorX,\n      horizontal = dataProps.horizontal;\n\n  var getError = function () {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"x\";\n    var baseError = type === \"y\" ? errorY : errorX;\n    var error = baseError && Array.isArray(baseError) ? baseError[0] : baseError;\n    return error || dataProps[type];\n  };\n\n  var labelStyle = style.labels || {};\n  var padding = labelStyle.padding || 0;\n  var textAnchor = horizontal ? \"start\" : \"middle\";\n  var verticalAnchor = horizontal ? \"middle\" : \"end\";\n  return {\n    style: labelStyle,\n    y: horizontal ? y : getError(\"y\"),\n    x: horizontal ? getError(\"x\") : x,\n    dy: horizontal ? 0 : -padding,\n    dx: horizontal ? padding : 0,\n    text: text,\n    index: index,\n    scale: scale,\n    datum: dataProps.datum,\n    data: dataProps.data,\n    textAnchor: labelStyle.textAnchor || textAnchor,\n    verticalAnchor: labelStyle.verticalAnchor || verticalAnchor,\n    angle: labelStyle.angle,\n    horizontal: horizontal\n  };\n};\n\nvar getBaseProps = function (props, fallbackProps) {\n  var modifiedProps = Helpers.modifyProps(props, fallbackProps, \"errorbar\");\n  props = _assign({}, modifiedProps, getCalculatedValues(modifiedProps));\n  var _props = props,\n      borderWidth = _props.borderWidth,\n      data = _props.data,\n      domain = _props.domain,\n      events = _props.events,\n      groupComponent = _props.groupComponent,\n      height = _props.height,\n      horizontal = _props.horizontal,\n      labels = _props.labels,\n      name = _props.name,\n      origin = _props.origin,\n      padding = _props.padding,\n      polar = _props.polar,\n      scale = _props.scale,\n      sharedEvents = _props.sharedEvents,\n      standalone = _props.standalone,\n      style = _props.style,\n      theme = _props.theme,\n      width = _props.width;\n  var initialChildProps = {\n    parent: {\n      data: data,\n      domain: domain,\n      height: height,\n      horizontal: horizontal,\n      name: name,\n      origin: origin,\n      padding: padding,\n      polar: polar,\n      scale: scale,\n      standalone: standalone,\n      style: style.parent,\n      theme: theme,\n      width: width\n    }\n  };\n  return data.reduce(function (childProps, datum, index) {\n    var eventKey = !_isNil(datum.eventKey) ? datum.eventKey : index;\n\n    var _Helpers$scalePoint = Helpers.scalePoint(_assign({}, props, {\n      scale: scale\n    }), datum),\n        x = _Helpers$scalePoint.x,\n        y = _Helpers$scalePoint.y;\n\n    var errorX = getErrors(props, datum, \"x\");\n    var errorY = getErrors(props, datum, \"y\");\n    var dataProps = {\n      borderWidth: borderWidth,\n      data: data,\n      datum: datum,\n      errorX: horizontal ? errorY : errorX,\n      errorY: horizontal ? errorX : errorY,\n      groupComponent: groupComponent,\n      horizontal: horizontal,\n      index: index,\n      scale: scale,\n      style: style.data,\n      x: x,\n      y: y\n    };\n    childProps[eventKey] = {\n      data: dataProps\n    };\n    var text = LabelHelpers.getText(props, datum, index);\n\n    if (text !== undefined && text !== null || labels && (events || sharedEvents)) {\n      childProps[eventKey].labels = getLabelProps(dataProps, text, style);\n    }\n\n    return childProps;\n  }, initialChildProps);\n};\n\nexport { getBaseProps, getDomain, getData };","map":null,"metadata":{},"sourceType":"module"}