{"ast":null,"code":"var _jsxFileName = \"/Users/developer/Desktop/Software_Projects/GolfApp/my-app/client/src/Main/Outings/SetOutings.js\";\nimport React from 'react';\nimport logo from \"../../logo.svg\";\nimport '../../App.css';\nimport { connect } from 'react-redux';\nimport { searchUser, addPendingOuting } from '../../Redux/actions/authActions';\n\nclass SetOutings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      friendsInvited: [],\n      friendsInvitedIds: [],\n      inviteSent: false,\n      isFriend: null,\n      friend: \"\",\n      location: \"\",\n      date: \"\"\n    };\n    this.AddFriend = this.AddFriend.bind(this);\n    this.handleFriendChange = this.handleFriendChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleDateChange = this.handleDateChange.bind(this);\n    this.sendInvite = this.sendInvite.bind(this);\n  } //Search the golfer's friend list to see if the invited person is already a friend.\n  //If the invitee is a friend, isFriend is set to true and a friend is appended\n  //friendsInvited\n\n\n  AddFriend(event) {\n    if (!(this.props.golfer.friends.filter(friend => friend.username === this.state.friend).length > 0)) {\n      this.setState({\n        isFriend: false\n      });\n    } else {\n      this.props.searchUser(this.state.friend).then(res => {\n        this.setState({\n          isFriend: true,\n          friendsInvited: [...this.state.friendsInvited, this.state.friend],\n          friendsInvitedIds: [...this.state.friendsInvitedIds, res.id]\n        });\n      });\n    }\n\n    event.preventDefault();\n  } //Event handler for changing friend state\n\n\n  handleFriendChange(event) {\n    this.setState({\n      friend: event.target.value\n    });\n  } //Event handler for changing location state\n\n\n  handleLocationChange(event) {\n    this.setState({\n      location: event.target.value\n    });\n  } //Event handler for changing date state\n\n\n  handleDateChange(event) {\n    this.setState({\n      date: event.target.value\n    });\n  } //TEMPORARY: Since a server hasn't been purchased yet, sendInvite will only\n  //set inviteSent to true\n\n\n  sendInvite(event) {\n    const participants = this.state.friendsInvitedIds.map(participant => {\n      return {\n        participant: participant,\n        confirmed: false\n      };\n    });\n    participants.push({\n      participant: this.props.golfer._id,\n      confirmed: true\n    });\n    const outing = {\n      creator: this.props.golfer._id,\n      pending: true,\n      location: this.state.location,\n      date: this.state.date,\n      participants: participants\n    };\n    this.props.addPendingOuting(outing);\n    this.setState(state => ({\n      inviteSent: !state.inviteSent\n    }));\n    event.preventDefault();\n  } //sendAnotherInvite resets all the fields for an invite to \"\" or empty\n\n\n  sendAnotherInvite(event) {\n    console.log(\"sendAnotherInvite triggered\");\n    this.setState(state => ({\n      inviteSent: !state.inviteSent,\n      friend: \"\",\n      friendsInvited: [],\n      location: \"\",\n      date: \"\"\n    }), function () {\n      console.log(\"first: \", this.state.inviteSent);\n    }); //event.preventDefault();\n  }\n\n  render() {\n    //Destructuring state into local variables to avoid typing `this.state` everytime\n    const _this$state = this.state,\n          friendsInvited = _this$state.friendsInvited,\n          inviteSent = _this$state.inviteSent,\n          isFriend = _this$state.isFriend,\n          friend = _this$state.friend,\n          location = _this$state.location,\n          date = _this$state.date;\n    console.log(\"second\");\n    console.log(\"friendsInvited render: \", this.state.friendsInvited);\n    console.log(\"inviteSent render: \", this.state.inviteSent);\n    console.log(\"this.state.friendsInvitedIds: \", this.state.friendsInvitedIds); //inviteForm allows you to select a date and golf course for a future outing.\n\n    const inviteForm = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.sendInvite,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Location:\", React.createElement(\"input\", {\n      type: \"text\",\n      id: \"location\",\n      value: location,\n      onChange: this.handleLocationChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Date:\", React.createElement(\"input\", {\n      type: \"date\",\n      id: \"outing-date\",\n      name: \"outing-date\",\n      value: date,\n      onChange: this.handleDateChange,\n      min: \"2018-01-01\",\n      max: \"2020-12-31\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      id: \"sendInvite\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }))); //addFriendForm allows you to search for someone in your friend's list to\n    //include to your outing. If the person is not your friend or doesn't exist,\n    //then isFriend is set to false.\n\n    const addFriendForm = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.AddFriend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Enter the name of a friend:\", React.createElement(\"input\", {\n      type: \"text\",\n      id: \"friend\",\n      value: friend,\n      onChange: this.handleFriendChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      id: \"AddFriend\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }))); //Displays an unordered list of friends you're planning to invite to your\n    //golf outing.\n\n    let friendsInvitedList;\n\n    if (friendsInvited.length > 0) {\n      friendsInvitedList = friendsInvited.map(friend => React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        key: friendsInvited.indexOf(friend),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, friend)));\n    } else {\n      friendsInvitedList = null;\n    } //Displays a message whether an invite has been sent.\n\n\n    let invitationMessage;\n\n    if (inviteSent == true) {\n      invitationMessage = React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Invitation Sent!\");\n    } else {\n      invitationMessage = null;\n    } //sendAnotherInvite Button only appears once inviteSent is 'True'\n\n\n    let sendAnotherInvite;\n\n    if (inviteSent == true) {\n      sendAnotherInvite = React.createElement(\"button\", {\n        type: \"button\",\n        id: \"PlanAnotherOuting\",\n        onClick: e => this.sendAnotherInvite(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Plan Another Outing! \");\n    } else {\n      sendAnotherInvite = null;\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Create an outing\"), invitationMessage, inviteForm, addFriendForm, friendsInvitedList, sendAnotherInvite);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  searchUser,\n  addPendingOuting\n})(SetOutings);","map":{"version":3,"sources":["/Users/developer/Desktop/Software_Projects/GolfApp/my-app/client/src/Main/Outings/SetOutings.js"],"names":["React","connect","searchUser","addPendingOuting","SetOutings","Component","constructor","props","state","friendsInvited","friendsInvitedIds","inviteSent","isFriend","friend","location","date","AddFriend","bind","handleFriendChange","handleLocationChange","handleDateChange","sendInvite","event","golfer","friends","filter","username","length","setState","then","res","id","preventDefault","target","value","participants","map","participant","confirmed","push","_id","outing","creator","pending","sendAnotherInvite","console","log","render","inviteForm","addFriendForm","friendsInvitedList","indexOf","invitationMessage","e","mapStateToProps","auth","errors"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from '../../logo.svg';\nimport '../../App.css';\n\nimport { connect } from 'react-redux';\nimport { searchUser, addPendingOuting } from '../../Redux/actions/authActions';\n\n\nclass SetOutings extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      friendsInvited: [],\n      friendsInvitedIds: [],\n      inviteSent: false,\n      isFriend: null,\n      friend: \"\",\n      location: \"\",\n      date: \"\"\n    }\n    this.AddFriend = this.AddFriend.bind(this);\n    this.handleFriendChange = this.handleFriendChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleDateChange = this.handleDateChange.bind(this);\n    this.sendInvite = this.sendInvite.bind(this);\n  }\n\n  //Search the golfer's friend list to see if the invited person is already a friend.\n  //If the invitee is a friend, isFriend is set to true and a friend is appended\n  //friendsInvited\n  AddFriend(event){\n\n    if(!(this.props.golfer.friends.filter(friend => friend.username === this.state.friend).length > 0)){\n      this.setState({\n        isFriend: false\n      });\n    }\n    else{\n      this.props.searchUser(this.state.friend).then(res => {\n        this.setState({\n          isFriend: true,\n          friendsInvited: [...this.state.friendsInvited, this.state.friend],\n          friendsInvitedIds: [...this.state.friendsInvitedIds, res.id]\n        });\n      })\n    }\n    event.preventDefault();\n  }\n\n  //Event handler for changing friend state\n  handleFriendChange(event){\n    this.setState({friend: event.target.value});\n  }\n  //Event handler for changing location state\n  handleLocationChange(event){\n    this.setState({location: event.target.value});\n  }\n  //Event handler for changing date state\n  handleDateChange(event){\n    this.setState({date: event.target.value});\n  }\n\n  //TEMPORARY: Since a server hasn't been purchased yet, sendInvite will only\n  //set inviteSent to true\n  sendInvite(event){\n\n    const participants = this.state.friendsInvitedIds.map(participant => {\n      return {\n        participant: participant,\n        confirmed: false\n      }\n    })\n\n    participants.push({\n      participant: this.props.golfer._id,\n      confirmed: true\n    })\n\n    const outing = {\n      creator: this.props.golfer._id,\n      pending: true,\n      location: this.state.location,\n      date: this.state.date,\n      participants: participants\n    }\n\n    this.props.addPendingOuting(outing);\n\n    this.setState((state) => ({inviteSent: !state.inviteSent}));\n    event.preventDefault();\n  }\n\n  //sendAnotherInvite resets all the fields for an invite to \"\" or empty\n  sendAnotherInvite(event){\n    console.log(\"sendAnotherInvite triggered\");\n    this.setState((state) => ({\n                   inviteSent: !state.inviteSent,\n                   friend: \"\",\n                   friendsInvited: [],\n                   location: \"\",\n                   date: \"\"}), function (){ console.log(\"first: \", this.state.inviteSent)});\n    //event.preventDefault();\n  }\n\n  render(){\n    //Destructuring state into local variables to avoid typing `this.state` everytime\n    const { friendsInvited, inviteSent, isFriend, friend, location, date } = this.state;\n\n    console.log(\"second\")\n    console.log(\"friendsInvited render: \", this.state.friendsInvited);\n    console.log(\"inviteSent render: \", this.state.inviteSent);\n    console.log(\"this.state.friendsInvitedIds: \", this.state.friendsInvitedIds)\n\n    //inviteForm allows you to select a date and golf course for a future outing.\n    const inviteForm = (\n      <div>\n        <form onSubmit={this.sendInvite}>\n          <label>\n            Location:\n            <input type=\"text\" id=\"location\"\n            value={location}\n            onChange={this.handleLocationChange}\n            required/>\n          </label> <br />\n          <label>\n            Date:\n            <input type=\"date\"\n            id=\"outing-date\"\n            name=\"outing-date\"\n            value={date}\n            onChange={this.handleDateChange}\n            min=\"2018-01-01\" max=\"2020-12-31\"\n            required/><br />\n          </label><br />\n          <input type=\"submit\" id=\"sendInvite\" value=\"Submit\"/>\n        </form>\n      </div>\n    );\n\n    //addFriendForm allows you to search for someone in your friend's list to\n    //include to your outing. If the person is not your friend or doesn't exist,\n    //then isFriend is set to false.\n    const addFriendForm = (\n      <div>\n        <form onSubmit={this.AddFriend}>\n          <label>\n            Enter the name of a friend:\n            <input type=\"text\" id=\"friend\"\n            value={friend}\n            onChange={this.handleFriendChange} />\n          </label> <br />\n          <input type=\"submit\" id=\"AddFriend\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n\n    //Displays an unordered list of friends you're planning to invite to your\n    //golf outing.\n    let friendsInvitedList;\n    if(friendsInvited.length > 0){\n      friendsInvitedList = (\n        friendsInvited.map(friend => (\n          <ul>\n            <li\n              key={friendsInvited.indexOf(friend)}\n            >\n              {friend}\n            </li>\n          </ul>\n        ))\n      );\n    }\n    else{\n      friendsInvitedList = null;\n    }\n\n    //Displays a message whether an invite has been sent.\n    let invitationMessage;\n    if(inviteSent == true){\n      invitationMessage = (<h2>Invitation Sent!</h2>);\n    }\n    else{\n      invitationMessage = null;\n    }\n\n    //sendAnotherInvite Button only appears once inviteSent is 'True'\n    let sendAnotherInvite;\n    if(inviteSent == true){\n      sendAnotherInvite = (<button type=\"button\" id=\"PlanAnotherOuting\" onClick={e => this.sendAnotherInvite(e)}>\n                            Plan Another Outing! </button>);\n    }\n    else{\n      sendAnotherInvite = null;\n    }\n\n    return(\n      <div>\n        <h1>Create an outing</h1>\n        {invitationMessage}\n        {inviteForm}\n        {addFriendForm}\n        {friendsInvitedList}\n        {sendAnotherInvite}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { searchUser, addPendingOuting}\n)(SetOutings);\n"]},"metadata":{},"sourceType":"module"}