{"ast":null,"code":"var _jsxFileName = \"/Users/developer/Desktop/Software_Projects/GolfApp/my-app/client/src/Main/Outings/SetOutings.js\";\nimport React from 'react';\nimport logo from \"../../logo.svg\";\nimport '../../App.css';\nimport { connect } from 'react-redux';\nimport { searchUser, addPendingOuting } from '../../Redux/actions/authActions';\n\nclass SetOutings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      friendsInvited: [],\n      friendsInvitedIds: [],\n      addFriend: false,\n      inviteSent: false,\n      isFriend: null,\n      invitationMessage: '',\n      friendMessage: '',\n      friend: \"\",\n      location: \"\",\n      date: \"\"\n    };\n    this.AddFriend = this.AddFriend.bind(this);\n    this.handleFriendChange = this.handleFriendChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleDateChange = this.handleDateChange.bind(this);\n    this.sendInvite = this.sendInvite.bind(this);\n  } //Search the golfer's friend list to see if the invited person is already a friend.\n  //If the invitee is a friend, isFriend is set to true and a friend is appended\n  //friendsInvited\n\n\n  AddFriend(event) {\n    if (!(this.props.golfer.friends.filter(friend => friend.username === this.state.friend).length > 0)) {\n      this.setState({\n        isFriend: false\n      });\n    } else {\n      this.props.searchUser(this.state.friend).then(res => {\n        this.setState({\n          isFriend: true,\n          friendsInvited: [...this.state.friendsInvited, this.state.friend],\n          friendsInvitedIds: [...this.state.friendsInvitedIds, res.id]\n        });\n      });\n    }\n\n    event.preventDefault();\n  } //Event handler for changing friend state\n\n\n  handleFriendChange(event) {\n    this.setState({\n      friend: event.target.value\n    });\n  } //Event handler for changing location state\n\n\n  handleLocationChange(event) {\n    this.setState({\n      location: event.target.value,\n      invitationMessage: ''\n    });\n  } //Event handler for changing date state\n\n\n  handleDateChange(event) {\n    this.setState({\n      date: event.target.value,\n      invitationMessage: ''\n    });\n  } //TEMPORARY: Since a server hasn't been purchased yet, sendInvite will only\n  //set inviteSent to true\n\n\n  sendInvite(event) {\n    console.log(\"this.state.friendsInvited.length: \", this.state.friendsInvited.length);\n\n    if (this.state.friendsInvited.length > 0) {\n      const participants = this.state.friendsInvitedIds.map(participant => {\n        return {\n          participant: participant,\n          confirmed: false\n        };\n      });\n      participants.push({\n        participant: this.props.golfer._id,\n        confirmed: true\n      });\n      const outing = {\n        creator: this.props.golfer._id,\n        pending: true,\n        location: this.state.location,\n        date: this.state.date,\n        participants: participants\n      };\n      this.props.addPendingOuting(outing);\n      this.setState(state => ({\n        inviteSent: !state.inviteSent,\n        invitationMessage: 'Invitation Sent',\n        addFriend: !state.addFriend\n      }));\n    } else {\n      this.setState({\n        invitationMessage: 'Friend needed'\n      });\n    }\n\n    event.preventDefault();\n  } //sendAnotherInvite resets all the fields for an invite to \"\" or empty\n\n\n  sendAnotherInvite(event) {\n    console.log(\"sendAnotherInvite triggered\");\n    this.setState(state => ({\n      inviteSent: !state.inviteSent,\n      friend: \"\",\n      friendsInvited: [],\n      location: \"\",\n      date: \"\"\n    }), function () {\n      console.log(\"first: \", this.state.inviteSent);\n    }); //event.preventDefault();\n  }\n\n  render() {\n    //Destructuring state into local variables to avoid typing `this.state` everytime\n    const _this$state = this.state,\n          friendsInvited = _this$state.friendsInvited,\n          inviteSent = _this$state.inviteSent,\n          isFriend = _this$state.isFriend,\n          friend = _this$state.friend,\n          location = _this$state.location,\n          date = _this$state.date;\n    console.log(\"second\");\n    console.log(\"friendsInvited render: \", this.state.friendsInvited);\n    console.log(\"inviteSent render: \", this.state.inviteSent);\n    console.log(\"this.state.friendsInvitedIds: \", this.state.friendsInvitedIds);\n    console.log(\"this.state.invitationMessage: \", this.state.invitationMessage); //inviteForm allows you to select a date and golf course for a future outing.\n\n    const inviteForm = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.sendInvite,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Location:\", React.createElement(\"input\", {\n      type: \"text\",\n      id: \"location\",\n      value: location,\n      onChange: this.handleLocationChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Date:\", React.createElement(\"input\", {\n      type: \"date\",\n      id: \"outing-date\",\n      name: \"outing-date\",\n      value: date,\n      onChange: this.handleDateChange,\n      min: \"2018-01-01\",\n      max: \"2020-12-31\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      id: \"sendInvite\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }))); //addFriendForm allows you to search for someone in your friend's list to\n    //include to your outing. If the person is not your friend or doesn't exist,\n    //then isFriend is set to false.\n\n    let addFriendForm;\n\n    if (this.state.addFriend) {\n      addFriendForm = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.AddFriend,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Enter the name of a friend:\", React.createElement(\"input\", {\n        type: \"text\",\n        id: \"friend\",\n        value: friend,\n        onChange: this.handleFriendChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      })), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        id: \"AddFriend\",\n        value: \"Search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      })));\n    } else {\n      addFriendForm = React.createElement(\"button\", {\n        onClick: () => this.setState({\n          addFriend: true\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Add friends\");\n    } //Displays an unordered list of friends you're planning to invite to your\n    //golf outing.\n\n\n    let friendsInvitedList;\n\n    if (this.state.inviteSent == false) {\n      if (friendsInvited.length > 0) {\n        friendsInvitedList = friendsInvited.map(friend => React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          key: friendsInvited.indexOf(friend),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, friend)));\n      } else {\n        friendsInvitedList = null;\n      }\n    } else {\n      friendsInvitedList = null;\n    } //Displays a message whether an invite has been sent.\n\n\n    let invitationMessage;\n\n    if (this.state.invitationMessage == 'Invitation Sent') {\n      invitationMessage = React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \"Invitation Sent!\");\n    } else if (this.state.invitationMessage == 'Friend needed') {\n      invitationMessage = React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"You must add at least one \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }), \"friend to create an outing\");\n    } else if (this.state.invitationMessage == null) {\n      invitationMessage = null;\n    } else {\n      invitationMessage = null;\n    } //sendAnotherInvite Button only appears once inviteSent is 'True'\n\n\n    let sendAnotherInvite;\n\n    if (inviteSent == true) {\n      sendAnotherInvite = React.createElement(\"button\", {\n        type: \"button\",\n        id: \"PlanAnotherOuting\",\n        onClick: e => this.sendAnotherInvite(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, \"Plan Another Outing! \");\n    } else {\n      sendAnotherInvite = null;\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"Create an outing\"), invitationMessage, inviteForm, addFriendForm, friendsInvitedList);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  searchUser,\n  addPendingOuting\n})(SetOutings);","map":{"version":3,"sources":["/Users/developer/Desktop/Software_Projects/GolfApp/my-app/client/src/Main/Outings/SetOutings.js"],"names":["React","connect","searchUser","addPendingOuting","SetOutings","Component","constructor","props","state","friendsInvited","friendsInvitedIds","addFriend","inviteSent","isFriend","invitationMessage","friendMessage","friend","location","date","AddFriend","bind","handleFriendChange","handleLocationChange","handleDateChange","sendInvite","event","golfer","friends","filter","username","length","setState","then","res","id","preventDefault","target","value","console","log","participants","map","participant","confirmed","push","_id","outing","creator","pending","sendAnotherInvite","render","inviteForm","addFriendForm","friendsInvitedList","indexOf","e","mapStateToProps","auth","errors"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,eAAP;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,iCAA7C;;AAGA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,cAAc,EAAE,EADL;AAEXC,MAAAA,iBAAiB,EAAE,EAFR;AAIXC,MAAAA,SAAS,EAAE,KAJA;AAKXC,MAAAA,UAAU,EAAE,KALD;AAMXC,MAAAA,QAAQ,EAAE,IANC;AAQXC,MAAAA,iBAAiB,EAAE,EARR;AASXC,MAAAA,aAAa,EAAE,EATJ;AAWXC,MAAAA,MAAM,EAAE,EAXG;AAYXC,MAAAA,QAAQ,EAAE,EAZC;AAaXC,MAAAA,IAAI,EAAE;AAbK,KAAb;AAeA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBD,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKE,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BF,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKG,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBH,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKI,UAAL,GAAkB,KAAKA,UAAL,CAAgBJ,IAAhB,CAAqB,IAArB,CAAlB;AACD,GAvBsC,CAyBvC;AACA;AACA;;;AACAD,EAAAA,SAAS,CAACM,KAAD,EAAO;AAEd,QAAG,EAAE,KAAKlB,KAAL,CAAWmB,MAAX,CAAkBC,OAAlB,CAA0BC,MAA1B,CAAiCZ,MAAM,IAAIA,MAAM,CAACa,QAAP,KAAoB,KAAKrB,KAAL,CAAWQ,MAA1E,EAAkFc,MAAlF,GAA2F,CAA7F,CAAH,EAAmG;AACjG,WAAKC,QAAL,CAAc;AACZlB,QAAAA,QAAQ,EAAE;AADE,OAAd;AAGD,KAJD,MAKI;AACF,WAAKN,KAAL,CAAWL,UAAX,CAAsB,KAAKM,KAAL,CAAWQ,MAAjC,EAAyCgB,IAAzC,CAA8CC,GAAG,IAAI;AACnD,aAAKF,QAAL,CAAc;AACZlB,UAAAA,QAAQ,EAAE,IADE;AAEZJ,UAAAA,cAAc,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,cAAf,EAA+B,KAAKD,KAAL,CAAWQ,MAA1C,CAFJ;AAGZN,UAAAA,iBAAiB,EAAE,CAAC,GAAG,KAAKF,KAAL,CAAWE,iBAAf,EAAkCuB,GAAG,CAACC,EAAtC;AAHP,SAAd;AAKD,OAND;AAOD;;AACDT,IAAAA,KAAK,CAACU,cAAN;AACD,GA7CsC,CA+CvC;;;AACAd,EAAAA,kBAAkB,CAACI,KAAD,EAAO;AACvB,SAAKM,QAAL,CAAc;AAACf,MAAAA,MAAM,EAAES,KAAK,CAACW,MAAN,CAAaC;AAAtB,KAAd;AACD,GAlDsC,CAmDvC;;;AACAf,EAAAA,oBAAoB,CAACG,KAAD,EAAO;AACzB,SAAKM,QAAL,CAAc;AAACd,MAAAA,QAAQ,EAAEQ,KAAK,CAACW,MAAN,CAAaC,KAAxB;AACCvB,MAAAA,iBAAiB,EAAE;AADpB,KAAd;AAED,GAvDsC,CAwDvC;;;AACAS,EAAAA,gBAAgB,CAACE,KAAD,EAAO;AACrB,SAAKM,QAAL,CAAc;AAACb,MAAAA,IAAI,EAAEO,KAAK,CAACW,MAAN,CAAaC,KAApB;AACCvB,MAAAA,iBAAiB,EAAE;AADpB,KAAd;AAED,GA5DsC,CA8DvC;AACA;;;AACAU,EAAAA,UAAU,CAACC,KAAD,EAAO;AACfa,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkD,KAAK/B,KAAL,CAAWC,cAAX,CAA0BqB,MAA5E;;AACA,QAAG,KAAKtB,KAAL,CAAWC,cAAX,CAA0BqB,MAA1B,GAAmC,CAAtC,EAAwC;AACtC,YAAMU,YAAY,GAAG,KAAKhC,KAAL,CAAWE,iBAAX,CAA6B+B,GAA7B,CAAiCC,WAAW,IAAI;AACnE,eAAO;AACLA,UAAAA,WAAW,EAAEA,WADR;AAELC,UAAAA,SAAS,EAAE;AAFN,SAAP;AAID,OALoB,CAArB;AAOAH,MAAAA,YAAY,CAACI,IAAb,CAAkB;AAChBF,QAAAA,WAAW,EAAE,KAAKnC,KAAL,CAAWmB,MAAX,CAAkBmB,GADf;AAEhBF,QAAAA,SAAS,EAAE;AAFK,OAAlB;AAKA,YAAMG,MAAM,GAAG;AACbC,QAAAA,OAAO,EAAE,KAAKxC,KAAL,CAAWmB,MAAX,CAAkBmB,GADd;AAEbG,QAAAA,OAAO,EAAE,IAFI;AAGb/B,QAAAA,QAAQ,EAAE,KAAKT,KAAL,CAAWS,QAHR;AAIbC,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWU,IAJJ;AAKbsB,QAAAA,YAAY,EAAEA;AALD,OAAf;AAQA,WAAKjC,KAAL,CAAWJ,gBAAX,CAA4B2C,MAA5B;AAEA,WAAKf,QAAL,CAAevB,KAAD,KAAY;AAACI,QAAAA,UAAU,EAAE,CAACJ,KAAK,CAACI,UAApB;AACCE,QAAAA,iBAAiB,EAAE,iBADpB;AAECH,QAAAA,SAAS,EAAE,CAACH,KAAK,CAACG;AAFnB,OAAZ,CAAd;AAGD,KA1BD,MA2BI;AACF,WAAKoB,QAAL,CAAc;AAACjB,QAAAA,iBAAiB,EAAE;AAApB,OAAd;AACD;;AACDW,IAAAA,KAAK,CAACU,cAAN;AACD,GAjGsC,CAmGvC;;;AACAc,EAAAA,iBAAiB,CAACxB,KAAD,EAAO;AACtBa,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,SAAKR,QAAL,CAAevB,KAAD,KAAY;AACXI,MAAAA,UAAU,EAAE,CAACJ,KAAK,CAACI,UADR;AAEXI,MAAAA,MAAM,EAAE,EAFG;AAGXP,MAAAA,cAAc,EAAE,EAHL;AAIXQ,MAAAA,QAAQ,EAAE,EAJC;AAKXC,MAAAA,IAAI,EAAE;AALK,KAAZ,CAAd,EAK2B,YAAW;AAAEoB,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAK/B,KAAL,CAAWI,UAAlC;AAA8C,KALtF,EAFsB,CAQtB;AACD;;AAEDsC,EAAAA,MAAM,GAAE;AACN;AADM,wBAEmE,KAAK1C,KAFxE;AAAA,UAEEC,cAFF,eAEEA,cAFF;AAAA,UAEkBG,UAFlB,eAEkBA,UAFlB;AAAA,UAE8BC,QAF9B,eAE8BA,QAF9B;AAAA,UAEwCG,MAFxC,eAEwCA,MAFxC;AAAA,UAEgDC,QAFhD,eAEgDA,QAFhD;AAAA,UAE0DC,IAF1D,eAE0DA,IAF1D;AAINoB,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC,KAAK/B,KAAL,CAAWC,cAAlD;AACA6B,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmC,KAAK/B,KAAL,CAAWI,UAA9C;AACA0B,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8C,KAAK/B,KAAL,CAAWE,iBAAzD;AACA4B,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8C,KAAK/B,KAAL,CAAWM,iBAAzD,EARM,CAUN;;AACA,UAAMqC,UAAU,GACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,QAAQ,EAAE,KAAK3B,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,UAAtB;AACA,MAAA,KAAK,EAAEP,QADP;AAEA,MAAA,QAAQ,EAAE,KAAKK,oBAFf;AAGA,MAAA,QAAQ,MAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,OAOW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPX,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AACA,MAAA,EAAE,EAAC,aADH;AAEA,MAAA,IAAI,EAAC,aAFL;AAGA,MAAA,KAAK,EAAEJ,IAHP;AAIA,MAAA,QAAQ,EAAE,KAAKK,gBAJf;AAKA,MAAA,GAAG,EAAC,YALJ;AAKiB,MAAA,GAAG,EAAC,YALrB;AAMA,MAAA,QAAQ,MANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAQY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARZ,CARF,EAiBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBV,EAkBE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,EAAE,EAAC,YAAxB;AAAqC,MAAA,KAAK,EAAC,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBF,CADF,CADF,CAXM,CAoCN;AACA;AACA;;AACA,QAAI6B,aAAJ;;AACA,QAAG,KAAK5C,KAAL,CAAWG,SAAd,EAAwB;AACtByC,MAAAA,aAAa,GACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,QAAQ,EAAE,KAAKjC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,QAAtB;AACA,QAAA,KAAK,EAAEH,MADP;AAEA,QAAA,QAAQ,EAAE,KAAKK,kBAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,OAMW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANX,EAOE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,EAAE,EAAC,WAAxB;AAAoC,QAAA,KAAK,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,CADF,CADA;AAYD,KAbD,MAcI;AACF+B,MAAAA,aAAa,GAAI;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKrB,QAAL,CAAc;AAACpB,UAAAA,SAAS,EAAE;AAAZ,SAAd,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAjB;AAGD,KA1DK,CA4DN;AACA;;;AACA,QAAI0C,kBAAJ;;AACA,QAAG,KAAK7C,KAAL,CAAWI,UAAX,IAAyB,KAA5B,EAAkC;AAChC,UAAGH,cAAc,CAACqB,MAAf,GAAwB,CAA3B,EAA6B;AAC3BuB,QAAAA,kBAAkB,GAChB5C,cAAc,CAACgC,GAAf,CAAmBzB,MAAM,IACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AACE,UAAA,GAAG,EAAEP,cAAc,CAAC6C,OAAf,CAAuBtC,MAAvB,CADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGGA,MAHH,CADF,CADF,CADF;AAWD,OAZD,MAaI;AACFqC,QAAAA,kBAAkB,GAAG,IAArB;AACD;AACF,KAjBD,MAkBI;AACFA,MAAAA,kBAAkB,GAAG,IAArB;AACD,KAnFK,CAsFN;;;AACA,QAAIvC,iBAAJ;;AACA,QAAG,KAAKN,KAAL,CAAWM,iBAAX,IAAgC,iBAAnC,EAAqD;AACnDA,MAAAA,iBAAiB,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAArB;AACD,KAFD,MAGK,IAAG,KAAKN,KAAL,CAAWM,iBAAX,IAAgC,eAAnC,EAAmD;AACtDA,MAAAA,iBAAiB,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA9B,+BAArB;AAED,KAHI,MAIA,IAAG,KAAKN,KAAL,CAAWM,iBAAX,IAAgC,IAAnC,EAAwC;AAC3CA,MAAAA,iBAAiB,GAAG,IAApB;AACD,KAFI,MAGD;AACFA,MAAAA,iBAAiB,GAAG,IAApB;AACD,KApGK,CAsGN;;;AACA,QAAImC,iBAAJ;;AACA,QAAGrC,UAAU,IAAI,IAAjB,EAAsB;AACpBqC,MAAAA,iBAAiB,GAAI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,EAAE,EAAC,mBAAzB;AAA6C,QAAA,OAAO,EAAEM,CAAC,IAAI,KAAKN,iBAAL,CAAuBM,CAAvB,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAArB;AAED,KAHD,MAII;AACFN,MAAAA,iBAAiB,GAAG,IAApB;AACD;;AAED,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGnC,iBAFH,EAGGqC,UAHH,EAIGC,aAJH,EAKGC,kBALH,CADF;AASD;;AAxOsC;;AA2OzC,MAAMG,eAAe,GAAGhD,KAAK,KAAK;AAChCiD,EAAAA,IAAI,EAAEjD,KAAK,CAACiD,IADoB;AAEhCC,EAAAA,MAAM,EAAElD,KAAK,CAACkD;AAFkB,CAAL,CAA7B;;AAKA,eAAezD,OAAO,CACpBuD,eADoB,EAEpB;AAAEtD,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAFoB,CAAP,CAGbC,UAHa,CAAf","sourcesContent":["import React from 'react';\nimport logo from '../../logo.svg';\nimport '../../App.css';\n\nimport { connect } from 'react-redux';\nimport { searchUser, addPendingOuting } from '../../Redux/actions/authActions';\n\n\nclass SetOutings extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      friendsInvited: [],\n      friendsInvitedIds: [],\n\n      addFriend: false,\n      inviteSent: false,\n      isFriend: null,\n\n      invitationMessage: '',\n      friendMessage: '',\n\n      friend: \"\",\n      location: \"\",\n      date: \"\"\n    }\n    this.AddFriend = this.AddFriend.bind(this);\n    this.handleFriendChange = this.handleFriendChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleDateChange = this.handleDateChange.bind(this);\n    this.sendInvite = this.sendInvite.bind(this);\n  }\n\n  //Search the golfer's friend list to see if the invited person is already a friend.\n  //If the invitee is a friend, isFriend is set to true and a friend is appended\n  //friendsInvited\n  AddFriend(event){\n\n    if(!(this.props.golfer.friends.filter(friend => friend.username === this.state.friend).length > 0)){\n      this.setState({\n        isFriend: false\n      });\n    }\n    else{\n      this.props.searchUser(this.state.friend).then(res => {\n        this.setState({\n          isFriend: true,\n          friendsInvited: [...this.state.friendsInvited, this.state.friend],\n          friendsInvitedIds: [...this.state.friendsInvitedIds, res.id]\n        });\n      })\n    }\n    event.preventDefault();\n  }\n\n  //Event handler for changing friend state\n  handleFriendChange(event){\n    this.setState({friend: event.target.value});\n  }\n  //Event handler for changing location state\n  handleLocationChange(event){\n    this.setState({location: event.target.value,\n                   invitationMessage: ''});\n  }\n  //Event handler for changing date state\n  handleDateChange(event){\n    this.setState({date: event.target.value,\n                   invitationMessage: ''});\n  }\n\n  //TEMPORARY: Since a server hasn't been purchased yet, sendInvite will only\n  //set inviteSent to true\n  sendInvite(event){\n    console.log(\"this.state.friendsInvited.length: \", this.state.friendsInvited.length)\n    if(this.state.friendsInvited.length > 0){\n      const participants = this.state.friendsInvitedIds.map(participant => {\n        return {\n          participant: participant,\n          confirmed: false\n        }\n      })\n\n      participants.push({\n        participant: this.props.golfer._id,\n        confirmed: true\n      })\n\n      const outing = {\n        creator: this.props.golfer._id,\n        pending: true,\n        location: this.state.location,\n        date: this.state.date,\n        participants: participants\n      }\n\n      this.props.addPendingOuting(outing);\n\n      this.setState((state) => ({inviteSent: !state.inviteSent,\n                                 invitationMessage: 'Invitation Sent',\n                                 addFriend: !state.addFriend}));\n    }\n    else{\n      this.setState({invitationMessage: 'Friend needed'})\n    }\n    event.preventDefault();\n  }\n\n  //sendAnotherInvite resets all the fields for an invite to \"\" or empty\n  sendAnotherInvite(event){\n    console.log(\"sendAnotherInvite triggered\");\n    this.setState((state) => ({\n                   inviteSent: !state.inviteSent,\n                   friend: \"\",\n                   friendsInvited: [],\n                   location: \"\",\n                   date: \"\"}), function (){ console.log(\"first: \", this.state.inviteSent)});\n    //event.preventDefault();\n  }\n\n  render(){\n    //Destructuring state into local variables to avoid typing `this.state` everytime\n    const { friendsInvited, inviteSent, isFriend, friend, location, date } = this.state;\n\n    console.log(\"second\")\n    console.log(\"friendsInvited render: \", this.state.friendsInvited);\n    console.log(\"inviteSent render: \", this.state.inviteSent);\n    console.log(\"this.state.friendsInvitedIds: \", this.state.friendsInvitedIds)\n    console.log(\"this.state.invitationMessage: \", this.state.invitationMessage);\n\n    //inviteForm allows you to select a date and golf course for a future outing.\n    const inviteForm = (\n      <div>\n        <form onSubmit={this.sendInvite}>\n          <label>\n            Location:\n            <input type=\"text\" id=\"location\"\n            value={location}\n            onChange={this.handleLocationChange}\n            required/>\n          </label> <br />\n          <label>\n            Date:\n            <input type=\"date\"\n            id=\"outing-date\"\n            name=\"outing-date\"\n            value={date}\n            onChange={this.handleDateChange}\n            min=\"2018-01-01\" max=\"2020-12-31\"\n            required/><br />\n          </label><br />\n          <input type=\"submit\" id=\"sendInvite\" value=\"Submit\"/>\n        </form>\n      </div>\n    );\n\n    //addFriendForm allows you to search for someone in your friend's list to\n    //include to your outing. If the person is not your friend or doesn't exist,\n    //then isFriend is set to false.\n    let addFriendForm;\n    if(this.state.addFriend){\n      addFriendForm = (\n      <div>\n        <form onSubmit={this.AddFriend}>\n          <label>\n            Enter the name of a friend:\n            <input type=\"text\" id=\"friend\"\n            value={friend}\n            onChange={this.handleFriendChange} />\n          </label> <br />\n          <input type=\"submit\" id=\"AddFriend\" value=\"Search\" />\n        </form>\n      </div>);\n    }\n    else{\n      addFriendForm = (<button onClick={() => this.setState({addFriend: true})}>\n                        Add friends\n                       </button>);\n    }\n\n    //Displays an unordered list of friends you're planning to invite to your\n    //golf outing.\n    let friendsInvitedList;\n    if(this.state.inviteSent == false){\n      if(friendsInvited.length > 0){\n        friendsInvitedList = (\n          friendsInvited.map(friend => (\n            <ul>\n              <li\n                key={friendsInvited.indexOf(friend)}\n              >\n                {friend}\n              </li>\n            </ul>\n          ))\n        );\n      }\n      else{\n        friendsInvitedList = null;\n      }\n    }\n    else{\n      friendsInvitedList = null;\n    }\n\n\n    //Displays a message whether an invite has been sent.\n    let invitationMessage;\n    if(this.state.invitationMessage == 'Invitation Sent'){\n      invitationMessage = (<h4>Invitation Sent!</h4>);\n    }\n    else if(this.state.invitationMessage == 'Friend needed'){\n      invitationMessage = (<h4>You must add at least one <br />\n                            friend to create an outing</h4>);\n    }\n    else if(this.state.invitationMessage == null){\n      invitationMessage = null;\n    }\n    else{\n      invitationMessage = null;\n    }\n\n    //sendAnotherInvite Button only appears once inviteSent is 'True'\n    let sendAnotherInvite;\n    if(inviteSent == true){\n      sendAnotherInvite = (<button type=\"button\" id=\"PlanAnotherOuting\" onClick={e => this.sendAnotherInvite(e)}>\n                            Plan Another Outing! </button>);\n    }\n    else{\n      sendAnotherInvite = null;\n    }\n\n    return(\n      <div>\n        <h1>Create an outing</h1>\n        {invitationMessage}\n        {inviteForm}\n        {addFriendForm}\n        {friendsInvitedList}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { searchUser, addPendingOuting}\n)(SetOutings);\n"]},"metadata":{},"sourceType":"module"}