{"ast":null,"code":"import _isFunction from \"lodash/isFunction\";\nimport _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/*eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 0.5, 1, 2] }]*/\n\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helpers, CommonProps, Line, Rect } from \"victory-core\";\n\nvar getCandleWidth = function (candleWidth, props) {\n  var style = props.style;\n\n  if (candleWidth) {\n    return _isFunction(candleWidth) ? Helpers.evaluateProp(candleWidth, props) : candleWidth;\n  } else if (style.width) {\n    return style.width;\n  }\n\n  return candleWidth;\n};\n\nvar getCandleProps = function (props, style) {\n  var id = props.id,\n      x = props.x,\n      close = props.close,\n      open = props.open,\n      horizontal = props.horizontal,\n      candleWidth = props.candleWidth;\n  var candleLength = Math.abs(close - open);\n  return {\n    key: \"\".concat(id, \"-candle\"),\n    style: Helpers.omit(style, [\"width\"]),\n    x: horizontal ? Math.min(open, close) : x - candleWidth / 2,\n    y: horizontal ? x - candleWidth / 2 : Math.min(open, close),\n    width: horizontal ? candleLength : candleWidth,\n    height: horizontal ? candleWidth : candleLength\n  };\n};\n\nvar getHighWickProps = function (props, style) {\n  var horizontal = props.horizontal,\n      high = props.high,\n      open = props.open,\n      close = props.close,\n      x = props.x,\n      id = props.id;\n  return {\n    key: \"\".concat(id, \"-highWick\"),\n    style: Helpers.omit(style, [\"width\"]),\n    x1: horizontal ? high : x,\n    x2: horizontal ? Math.max(open, close) : x,\n    y1: horizontal ? x : high,\n    y2: horizontal ? x : Math.min(open, close)\n  };\n};\n\nvar getLowWickProps = function (props, style) {\n  var horizontal = props.horizontal,\n      low = props.low,\n      open = props.open,\n      close = props.close,\n      x = props.x,\n      id = props.id;\n  return {\n    key: \"\".concat(id, \"-lowWick\"),\n    style: Helpers.omit(style, [\"width\"]),\n    x1: horizontal ? Math.min(open, close) : x,\n    x2: horizontal ? low : x,\n    y1: horizontal ? x : Math.max(open, close),\n    y2: horizontal ? x : low\n  };\n};\n\nvar evaluateProps = function (props) {\n  // Potential evaluated props are 1) `style`, 2) `candleWidth`\n  var style = Helpers.evaluateStyle(_assign({\n    stroke: \"black\"\n  }, props.style), props);\n  var candleWidth = getCandleWidth(props.candleWidth, _assign({}, props, {\n    style: style\n  }));\n  return _assign({}, props, {\n    style: style,\n    candleWidth: candleWidth\n  });\n};\n\nvar Candle = function (props) {\n  props = evaluateProps(props);\n  var _props = props,\n      events = _props.events,\n      groupComponent = _props.groupComponent,\n      clipPath = _props.clipPath,\n      rectComponent = _props.rectComponent,\n      lineComponent = _props.lineComponent,\n      role = _props.role,\n      shapeRendering = _props.shapeRendering,\n      className = _props.className,\n      wickStrokeWidth = _props.wickStrokeWidth,\n      transform = _props.transform,\n      style = _props.style;\n\n  var wickStyle = _defaults({\n    strokeWidth: wickStrokeWidth\n  }, style);\n\n  var sharedProps = _objectSpread({}, events, {\n    role: role,\n    shapeRendering: shapeRendering,\n    className: className,\n    transform: transform,\n    clipPath: clipPath,\n    desc: Helpers.evaluateProp(props.desc, props),\n    tabIndex: Helpers.evaluateProp(props.tabIndex, props)\n  });\n\n  var candleProps = _assign(getCandleProps(props, style), sharedProps);\n\n  var highWickProps = _assign(getHighWickProps(props, wickStyle), sharedProps);\n\n  var lowWickProps = _assign(getLowWickProps(props, wickStyle), sharedProps);\n\n  return React.cloneElement(groupComponent, {}, [React.cloneElement(rectComponent, candleProps), React.cloneElement(lineComponent, highWickProps), React.cloneElement(lineComponent, lowWickProps)]);\n};\n\nCandle.propTypes = _objectSpread({}, CommonProps.primitiveProps, {\n  candleRatio: PropTypes.number,\n  candleWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  close: PropTypes.number,\n  datum: PropTypes.object,\n  groupComponent: PropTypes.element,\n  high: PropTypes.number,\n  lineComponent: PropTypes.element,\n  low: PropTypes.number,\n  open: PropTypes.number,\n  rectComponent: PropTypes.element,\n  wickStrokeWidth: PropTypes.number,\n  width: PropTypes.number,\n  x: PropTypes.number\n});\nCandle.defaultProps = {\n  groupComponent: React.createElement(\"g\", null),\n  lineComponent: React.createElement(Line, null),\n  rectComponent: React.createElement(Rect, null),\n  role: \"presentation\",\n  shapeRendering: \"auto\"\n};\nexport default Candle;","map":null,"metadata":{},"sourceType":"module"}