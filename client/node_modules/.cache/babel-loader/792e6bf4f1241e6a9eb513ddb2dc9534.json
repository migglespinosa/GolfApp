{"ast":null,"code":"import _mapValues from \"lodash/mapValues\";\nimport _defaults from \"lodash/defaults\";\nimport _isFunction from \"lodash/isFunction\";\nimport _throttle from \"lodash/throttle\";\nimport _assign from \"lodash/assign\";\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport { Selection } from \"victory-core\";\nimport isEqual from \"react-fast-compare\";\nvar Helpers = {\n  getDimension: function (props) {\n    var horizontal = props.horizontal,\n        brushDimension = props.brushDimension;\n\n    if (!horizontal || !brushDimension) {\n      return brushDimension;\n    }\n\n    return brushDimension === \"x\" ? \"y\" : \"x\";\n  },\n  withinBounds: function (point, bounds, padding) {\n    var _mapValues2 = _mapValues(bounds, Number),\n        x1 = _mapValues2.x1,\n        x2 = _mapValues2.x2,\n        y1 = _mapValues2.y1,\n        y2 = _mapValues2.y2;\n\n    var _mapValues3 = _mapValues(point, Number),\n        x = _mapValues3.x,\n        y = _mapValues3.y;\n\n    padding = padding ? padding / 2 : 0;\n    return x + padding >= Math.min(x1, x2) && x - padding <= Math.max(x1, x2) && y + padding >= Math.min(y1, y2) && y - padding <= Math.max(y1, y2);\n  },\n  getDomainBox: function (props, fullDomain, selectedDomain) {\n    var brushDimension = this.getDimension(props);\n    fullDomain = _defaults({}, fullDomain, props.domain);\n    selectedDomain = _defaults({}, selectedDomain, fullDomain);\n    var fullCoords = Selection.getDomainCoordinates(props, fullDomain);\n    var selectedCoords = Selection.getDomainCoordinates(props, selectedDomain);\n    return {\n      x1: brushDimension !== \"y\" ? Math.min.apply(Math, _toConsumableArray(selectedCoords.x)) : Math.min.apply(Math, _toConsumableArray(fullCoords.x)),\n      x2: brushDimension !== \"y\" ? Math.max.apply(Math, _toConsumableArray(selectedCoords.x)) : Math.max.apply(Math, _toConsumableArray(fullCoords.x)),\n      y1: brushDimension !== \"x\" ? Math.min.apply(Math, _toConsumableArray(selectedCoords.y)) : Math.min.apply(Math, _toConsumableArray(fullCoords.y)),\n      y2: brushDimension !== \"x\" ? Math.max.apply(Math, _toConsumableArray(selectedCoords.y)) : Math.max.apply(Math, _toConsumableArray(fullCoords.y))\n    };\n  },\n  getHandles: function (props, domainBox) {\n    var brushDimension = this.getDimension(props);\n    var x1 = domainBox.x1,\n        x2 = domainBox.x2,\n        y1 = domainBox.y1,\n        y2 = domainBox.y2;\n    var minX = Math.min(x1, x2);\n    var maxX = Math.max(x1, x2);\n    var minY = Math.min(y1, y2);\n    var maxY = Math.max(y1, y2);\n    var handleWidth = props.handleWidth / 2;\n    return {\n      left: brushDimension !== \"y\" && {\n        x1: minX - handleWidth,\n        x2: minX + handleWidth,\n        y1: y1,\n        y2: y2\n      },\n      right: brushDimension !== \"y\" && {\n        x1: maxX - handleWidth,\n        x2: maxX + handleWidth,\n        y1: y1,\n        y2: y2\n      },\n      top: brushDimension !== \"x\" && {\n        x1: x1,\n        x2: x2,\n        y1: minY - handleWidth,\n        y2: minY + handleWidth\n      },\n      bottom: brushDimension !== \"x\" && {\n        x1: x1,\n        x2: x2,\n        y1: maxY - handleWidth,\n        y2: maxY + handleWidth\n      }\n    };\n  },\n  getActiveHandles: function (point, props, domainBox) {\n    var _this = this;\n\n    var handles = this.getHandles(props, domainBox);\n    var activeHandles = [\"top\", \"bottom\", \"left\", \"right\"].reduce(function (memo, opt) {\n      memo = handles[opt] && _this.withinBounds(point, handles[opt]) ? memo.concat(opt) : memo;\n      return memo;\n    }, []);\n    return activeHandles.length && activeHandles;\n  },\n  getResizeMutation: function (box, handles) {\n    var x1 = box.x1,\n        y1 = box.y1,\n        x2 = box.x2,\n        y2 = box.y2;\n    var mutations = {\n      left: {\n        x1: Math.max(x1, x2),\n        x2: Math.min(x1, x2),\n        y1: y1,\n        y2: y2\n      },\n      right: {\n        x1: Math.min(x1, x2),\n        x2: Math.max(x1, x2),\n        y1: y1,\n        y2: y2\n      },\n      top: {\n        y1: Math.max(y1, y2),\n        y2: Math.min(y1, y2),\n        x1: x1,\n        x2: x2\n      },\n      bottom: {\n        y1: Math.min(y1, y2),\n        y2: Math.max(y1, y2),\n        x1: x1,\n        x2: x2\n      }\n    };\n    return handles.reduce(function (memo, current) {\n      return _assign(memo, mutations[current]);\n    }, {});\n  },\n  getMinimumDomain: function () {\n    return {\n      x: [0, 1 / Number.MAX_SAFE_INTEGER],\n      y: [0, 1 / Number.MAX_SAFE_INTEGER]\n    };\n  },\n  getDefaultBrushArea: function (targetProps, cachedDomain, evt) {\n    var defaultBrushArea = targetProps.defaultBrushArea,\n        domain = targetProps.domain,\n        fullDomain = targetProps.fullDomain,\n        scale = targetProps.scale,\n        horizontal = targetProps.horizontal;\n\n    if (defaultBrushArea === \"none\") {\n      return this.getMinimumDomain();\n    } else if (defaultBrushArea === \"disable\") {\n      return cachedDomain;\n    } else if (defaultBrushArea === \"move\") {\n      var brushBox = this.getDomainBox(targetProps, fullDomain, cachedDomain);\n      var parentSVG = targetProps.parentSVG || Selection.getParentSVG(evt);\n      var pannedBox = this.panBox(_objectSpread({}, targetProps, brushBox, {\n        brushDomain: cachedDomain,\n        startX: (brushBox.x1 + brushBox.x2) / 2,\n        startY: (brushBox.y1 + brushBox.y2) / 2\n      }), Selection.getSVGEventCoordinates(evt, parentSVG));\n      var fullDomainBox = targetProps.fullDomainBox || this.getDomainBox(targetProps, fullDomain);\n      var constrainedBox = this.constrainBox(pannedBox, fullDomainBox);\n      return Selection.getBounds(_objectSpread({}, constrainedBox, {\n        scale: scale,\n        horizontal: horizontal\n      }));\n    } else {\n      return domain;\n    }\n  },\n  getSelectionMutation: function (point, box, brushDimension) {\n    var x = point.x,\n        y = point.y;\n    var x1 = box.x1,\n        x2 = box.x2,\n        y1 = box.y1,\n        y2 = box.y2;\n    return {\n      x1: brushDimension !== \"y\" ? x : x1,\n      y1: brushDimension !== \"x\" ? y : y1,\n      x2: brushDimension !== \"y\" ? x : x2,\n      y2: brushDimension !== \"x\" ? y : y2\n    };\n  },\n  panBox: function (props, point) {\n    var domain = props.domain,\n        startX = props.startX,\n        startY = props.startY;\n    var brushDimension = this.getDimension(props);\n\n    var brushDomain = _defaults({}, props.brushDomain, domain);\n\n    var fullDomain = _defaults({}, props.fullDomain, domain);\n\n    var _ref = props.x1 ? props : this.getDomainBox(props, fullDomain, brushDomain),\n        x1 = _ref.x1,\n        x2 = _ref.x2,\n        y1 = _ref.y1,\n        y2 = _ref.y2;\n\n    var x = point.x,\n        y = point.y;\n    var delta = {\n      x: startX ? startX - x : 0,\n      y: startY ? startY - y : 0\n    };\n    return {\n      x1: brushDimension !== \"y\" ? Math.min(x1, x2) - delta.x : Math.min(x1, x2),\n      x2: brushDimension !== \"y\" ? Math.max(x1, x2) - delta.x : Math.max(x1, x2),\n      y1: brushDimension !== \"x\" ? Math.min(y1, y2) - delta.y : Math.min(y1, y2),\n      y2: brushDimension !== \"x\" ? Math.max(y1, y2) - delta.y : Math.max(y1, y2)\n    };\n  },\n  constrainBox: function (box, fullDomainBox) {\n    var _mapValues4 = _mapValues(fullDomainBox, Number),\n        x1 = _mapValues4.x1,\n        y1 = _mapValues4.y1,\n        x2 = _mapValues4.x2,\n        y2 = _mapValues4.y2;\n\n    return {\n      x1: box.x2 > x2 ? x2 - Math.abs(box.x2 - box.x1) : Math.max(box.x1, x1),\n      y1: box.y2 > y2 ? y2 - Math.abs(box.y2 - box.y1) : Math.max(box.y1, y1),\n      x2: box.x1 < x1 ? x1 + Math.abs(box.x2 - box.x1) : Math.min(box.x2, x2),\n      y2: box.y1 < y1 ? y1 + Math.abs(box.y2 - box.y1) : Math.min(box.y2, y2)\n    };\n  },\n  hasMoved: function (props) {\n    var x1 = props.x1,\n        x2 = props.x2,\n        y1 = props.y1,\n        y2 = props.y2,\n        mouseMoveThreshold = props.mouseMoveThreshold;\n    var brushDimension = this.getDimension(props);\n    var xMoved = Math.abs(x1 - x2) >= mouseMoveThreshold;\n    var yMoved = Math.abs(y1 - y2) >= mouseMoveThreshold;\n\n    switch (brushDimension) {\n      case \"x\":\n        return xMoved;\n\n      case \"y\":\n        return yMoved;\n\n      default:\n        return xMoved || yMoved;\n    }\n  },\n  // eslint-disable-next-line max-statements, complexity\n  onMouseDown: function (evt, targetProps) {\n    var _this2 = this;\n\n    evt.preventDefault();\n    var handleWidth = targetProps.handleWidth,\n        cachedBrushDomain = targetProps.cachedBrushDomain,\n        domain = targetProps.domain,\n        allowResize = targetProps.allowResize,\n        allowDrag = targetProps.allowDrag,\n        allowDraw = targetProps.allowDraw;\n    var brushDimension = this.getDimension(targetProps); // Don't trigger events for static brushes\n\n    if (!allowResize && !allowDrag) {\n      return {};\n    }\n\n    var fullDomainBox = targetProps.fullDomainBox || this.getDomainBox(targetProps, domain);\n    var parentSVG = targetProps.parentSVG || Selection.getParentSVG(evt);\n\n    var _Selection$getSVGEven = Selection.getSVGEventCoordinates(evt, parentSVG),\n        x = _Selection$getSVGEven.x,\n        y = _Selection$getSVGEven.y; // Ignore events that occur outside of the maximum domain region\n\n\n    if (!this.withinBounds({\n      x: x,\n      y: y\n    }, fullDomainBox, handleWidth)) {\n      return {};\n    }\n\n    var brushDomain = _defaults({}, targetProps.brushDomain, domain);\n\n    var currentDomain = isEqual(brushDomain, cachedBrushDomain) ? targetProps.currentDomain || brushDomain || domain : brushDomain || domain;\n    var domainBox = this.getDomainBox(targetProps, domain, currentDomain);\n    var activeHandles = allowResize && this.getActiveHandles({\n      x: x,\n      y: y\n    }, targetProps, domainBox); // If the event occurs in any of the handle regions, start a resize\n\n    if (activeHandles) {\n      return [{\n        target: \"parent\",\n        mutation: function () {\n          return _objectSpread({\n            isSelecting: true,\n            domainBox: domainBox,\n            fullDomainBox: fullDomainBox,\n            cachedBrushDomain: brushDomain,\n            currentDomain: currentDomain,\n            parentSVG: parentSVG\n          }, _this2.getResizeMutation(domainBox, activeHandles));\n        }\n      }];\n    } else if (this.withinBounds({\n      x: x,\n      y: y\n    }, domainBox) && !isEqual(domain, currentDomain)) {\n      // if the event occurs within a selected region start a panning event, unless the whole\n      // domain is selected\n      return [{\n        target: \"parent\",\n        mutation: function () {\n          return _objectSpread({\n            isPanning: allowDrag,\n            startX: x,\n            startY: y,\n            domainBox: domainBox,\n            fullDomainBox: fullDomainBox,\n            currentDomain: currentDomain,\n            cachedBrushDomain: brushDomain,\n            parentSVG: parentSVG\n          }, domainBox);\n        }\n      }];\n    } else {\n      // if the event occurs outside the region, or if the whole domain is selected,\n      // start a new selection\n      return allowDraw ? [{\n        target: \"parent\",\n        mutation: function () {\n          return _objectSpread({\n            isSelecting: allowResize,\n            domainBox: domainBox,\n            fullDomainBox: fullDomainBox,\n            parentSVG: parentSVG,\n            cachedBrushDomain: brushDomain,\n            cachedCurrentDomain: currentDomain,\n            currentDomain: _this2.getMinimumDomain()\n          }, _this2.getSelectionMutation({\n            x: x,\n            y: y\n          }, domainBox, brushDimension));\n        }\n      }] : {};\n    }\n  },\n  // eslint-disable-next-line max-statements, complexity\n  onMouseMove: function (evt, targetProps) {\n    // if a panning or selection has not been started, ignore the event\n    if (!targetProps.isPanning && !targetProps.isSelecting) {\n      return {};\n    }\n\n    var scale = targetProps.scale,\n        isPanning = targetProps.isPanning,\n        isSelecting = targetProps.isSelecting,\n        fullDomainBox = targetProps.fullDomainBox,\n        onBrushDomainChange = targetProps.onBrushDomainChange,\n        allowResize = targetProps.allowResize,\n        allowDrag = targetProps.allowDrag,\n        horizontal = targetProps.horizontal,\n        mouseMoveThreshold = targetProps.mouseMoveThreshold;\n    var brushDimension = this.getDimension(targetProps);\n    var parentSVG = targetProps.parentSVG || Selection.getParentSVG(evt);\n\n    var _Selection$getSVGEven2 = Selection.getSVGEventCoordinates(evt, parentSVG),\n        x = _Selection$getSVGEven2.x,\n        y = _Selection$getSVGEven2.y; // Ignore events that occur outside of the maximum domain region\n\n\n    if (!allowResize && !allowDrag || !this.withinBounds({\n      x: x,\n      y: y\n    }, fullDomainBox) || mouseMoveThreshold > 0 && !this.hasMoved(_objectSpread({}, targetProps, {\n      x2: x,\n      y2: y\n    }))) {\n      return {};\n    }\n\n    if (allowDrag && isPanning) {\n      var startX = targetProps.startX,\n          startY = targetProps.startY;\n      var pannedBox = this.panBox(targetProps, {\n        x: x,\n        y: y\n      });\n      var constrainedBox = this.constrainBox(pannedBox, fullDomainBox);\n      var currentDomain = Selection.getBounds(_objectSpread({}, constrainedBox, {\n        scale: scale,\n        horizontal: horizontal\n      }));\n\n      var mutatedProps = _objectSpread({\n        currentDomain: currentDomain,\n        parentSVG: parentSVG,\n        startX: pannedBox.x2 >= fullDomainBox.x2 || pannedBox.x1 <= fullDomainBox.x1 ? startX : x,\n        startY: pannedBox.y2 >= fullDomainBox.y2 || pannedBox.y1 <= fullDomainBox.y1 ? startY : y\n      }, constrainedBox);\n\n      if (_isFunction(onBrushDomainChange)) {\n        onBrushDomainChange(currentDomain, _defaults({}, mutatedProps, targetProps));\n      }\n\n      return [{\n        target: \"parent\",\n        mutation: function () {\n          return mutatedProps;\n        }\n      }];\n    } else if (allowResize && isSelecting) {\n      var x2 = brushDimension !== \"y\" ? x : targetProps.x2;\n      var y2 = brushDimension !== \"x\" ? y : targetProps.y2;\n\n      var _currentDomain = Selection.getBounds({\n        x2: x2,\n        y2: y2,\n        x1: targetProps.x1,\n        y1: targetProps.y1,\n        scale: scale,\n        horizontal: horizontal\n      });\n\n      var _mutatedProps = {\n        x2: x2,\n        y2: y2,\n        currentDomain: _currentDomain,\n        parentSVG: parentSVG\n      };\n\n      if (_isFunction(onBrushDomainChange)) {\n        onBrushDomainChange(_currentDomain, _defaults({}, _mutatedProps, targetProps));\n      }\n\n      return [{\n        target: \"parent\",\n        mutation: function () {\n          return _mutatedProps;\n        }\n      }];\n    }\n\n    return {};\n  },\n  onMouseUp: function (evt, targetProps) {\n    // eslint-disable-line max-statements, complexity\n    var x1 = targetProps.x1,\n        y1 = targetProps.y1,\n        x2 = targetProps.x2,\n        y2 = targetProps.y2,\n        isPanning = targetProps.isPanning,\n        isSelecting = targetProps.isSelecting,\n        onBrushDomainChange = targetProps.onBrushDomainChange,\n        onBrushDomainChangeEnd = targetProps.onBrushDomainChangeEnd,\n        onBrushCleared = targetProps.onBrushCleared,\n        currentDomain = targetProps.currentDomain,\n        allowResize = targetProps.allowResize,\n        allowDrag = targetProps.allowDrag,\n        defaultBrushArea = targetProps.defaultBrushArea;\n    var defaultBrushHasArea = defaultBrushArea !== undefined && defaultBrushArea !== \"none\";\n    var mutatedProps = {\n      isPanning: false,\n      isSelecting: false\n    }; // if the mouse hasn't moved since a mouseDown event, select the default brush area\n\n    if ((allowResize || defaultBrushHasArea) && (x1 === x2 || y1 === y2)) {\n      var cachedDomain = targetProps.cachedCurrentDomain || currentDomain;\n      var defaultDomain = this.getDefaultBrushArea(targetProps, cachedDomain, evt);\n      mutatedProps.currentDomain = defaultDomain;\n\n      if (_isFunction(onBrushDomainChange)) {\n        onBrushDomainChange(defaultDomain, _defaults({}, mutatedProps, targetProps));\n      }\n\n      if (_isFunction(onBrushDomainChangeEnd)) {\n        onBrushDomainChangeEnd(defaultDomain, _defaults({}, mutatedProps, targetProps));\n      }\n\n      if (_isFunction(onBrushCleared)) {\n        onBrushCleared(defaultDomain, _defaults({}, mutatedProps, targetProps));\n      }\n    } else if (allowDrag && isPanning || allowResize && isSelecting) {\n      if (_isFunction(onBrushDomainChangeEnd)) {\n        onBrushDomainChangeEnd(currentDomain, _defaults({}, mutatedProps, targetProps));\n      }\n    }\n\n    return [{\n      target: \"parent\",\n      mutation: function () {\n        return mutatedProps;\n      }\n    }];\n  },\n  onMouseLeave: function () {\n    return [{\n      target: \"parent\",\n      mutation: function () {\n        return {\n          isPanning: false,\n          isSelecting: false\n        };\n      }\n    }];\n  }\n};\nexport default _objectSpread({}, Helpers, {\n  onMouseDown: Helpers.onMouseDown.bind(Helpers),\n  onMouseUp: Helpers.onMouseUp.bind(Helpers),\n  onMouseLeave: Helpers.onMouseLeave.bind(Helpers),\n  onMouseMove: _throttle(Helpers.onMouseMove.bind(Helpers), 16, // eslint-disable-line no-magic-numbers\n  {\n    leading: true,\n    trailing: false\n  })\n});","map":null,"metadata":{},"sourceType":"module"}