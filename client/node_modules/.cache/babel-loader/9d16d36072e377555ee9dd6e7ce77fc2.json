{"ast":null,"code":"import _assign from \"lodash/assign\";\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/*eslint no-magic-numbers: [\"error\", { \"ignore\": [-1, 0, 1, 2] }]*/\n\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as d3Shape from \"d3-shape\";\nimport { Helpers, CommonProps, Path } from \"victory-core\";\n\nvar defined = function (d) {\n  var y = d._y1 !== undefined ? d._y1 : d._y;\n  return y !== null && y !== undefined && d._y0 !== null;\n};\n\nvar getXAccessor = function (scale) {\n  return function (d) {\n    return scale.x(d._x1 !== undefined ? d._x1 : d._x);\n  };\n};\n\nvar getYAccessor = function (scale) {\n  return function (d) {\n    return scale.y(d._y1 !== undefined ? d._y1 : d._y);\n  };\n};\n\nvar getAngleAccessor = function (scale) {\n  return function (d) {\n    var x = scale.x(d._x1 !== undefined ? d._x1 : d._x);\n    return -1 * x + Math.PI / 2;\n  };\n};\n\nvar toNewName = function (interpolation) {\n  // d3 shape changed the naming scheme for interpolators from \"basis\" -> \"curveBasis\" etc.\n  var capitalize = function (s) {\n    return s && s[0].toUpperCase() + s.slice(1);\n  };\n\n  return \"curve\".concat(capitalize(interpolation));\n};\n\nvar getLineFunction = function (props) {\n  var polar = props.polar,\n      scale = props.scale,\n      horizontal = props.horizontal;\n  var defaultOpenCurve = polar ? false : true;\n  var openCurve = props.openCurve === undefined ? defaultOpenCurve : props.openCurve;\n  var interpolationFunction = typeof props.interpolation === \"function\" && props.interpolation;\n  var interpolationName = typeof props.interpolation === \"string\" && (!openCurve ? \"\".concat(toNewName(props.interpolation), \"Closed\") : toNewName(props.interpolation));\n  return polar ? d3Shape.lineRadial().defined(defined).curve(interpolationFunction || d3Shape[interpolationName]).angle(getAngleAccessor(scale)).radius(getYAccessor(scale)) : d3Shape.line().defined(defined).curve(interpolationFunction || d3Shape[interpolationName]).x(horizontal ? getYAccessor(scale) : getXAccessor(scale)).y(horizontal ? getXAccessor(scale) : getYAccessor(scale));\n};\n\nvar Curve = function (props) {\n  var polar = props.polar,\n      origin = props.origin;\n  var lineFunction = getLineFunction(props);\n  var defaultTransform = polar && origin ? \"translate(\".concat(origin.x, \", \").concat(origin.y, \")\") : undefined;\n  return React.cloneElement(props.pathComponent, _objectSpread({}, props.events, {\n    d: lineFunction(props.data),\n    style: Helpers.evaluateStyle(_assign({\n      fill: \"none\",\n      stroke: \"black\"\n    }, props.style), props),\n    transform: props.transform || defaultTransform,\n    className: props.className,\n    role: props.role,\n    shapeRendering: props.shapeRendering,\n    clipPath: props.clipPath\n  }));\n};\n\nCurve.propTypes = _objectSpread({}, CommonProps.primitiveProps, {\n  interpolation: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  openCurve: PropTypes.bool,\n  origin: PropTypes.object,\n  pathComponent: PropTypes.element,\n  polar: PropTypes.bool\n});\nCurve.defaultProps = {\n  pathComponent: React.createElement(Path, null),\n  role: \"presentation\",\n  shapeRendering: \"auto\"\n};\nexport default Curve;","map":null,"metadata":{},"sourceType":"module"}