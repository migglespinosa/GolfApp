{"ast":null,"code":"import _isNil from \"lodash/isNil\";\nimport _isNaN from \"lodash/isNaN\";\nimport _keys from \"lodash/keys\";\nimport _groupBy from \"lodash/groupBy\";\nimport _uniq from \"lodash/uniq\";\nimport _assign from \"lodash/assign\";\nimport _defaults from \"lodash/defaults\";\nimport _orderBy from \"lodash/orderBy\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Helpers, Scale, Domain, Data } from \"victory-core\";\nimport { min as d3Min, max as d3Max, quantile as d3Quantile } from \"d3-array\";\nvar TYPES = [\"max\", \"min\", \"median\", \"q1\", \"q3\"];\n\nvar checkProcessedData = function (data) {\n  /* check if the data is pre-processed. start by checking that it has\n  all required quartile attributes. */\n  var hasQuartileAttributes = data.every(function (datum) {\n    return TYPES.every(function (val) {\n      return typeof datum[\"_\".concat(val)] !== \"undefined\";\n    });\n  });\n\n  if (hasQuartileAttributes) {\n    // check that the independent variable is distinct\n    var values = data.map(function (d) {\n      return d._x;\n    });\n\n    if (!_uniq(values).length === values.length) {\n      throw new Error(\"\\n        data prop may only take an array of objects with a unique\\n        independent variable. Make sure your x values are distinct.\\n      \");\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nvar nanToNull = function (val) {\n  return _isNaN(val) ? null : val;\n};\n\nvar getSummaryStatistics = function (data) {\n  var dependentVars = data.map(function (datum) {\n    return datum._y;\n  });\n  var quartiles = {\n    _q1: nanToNull(d3Quantile(dependentVars, 0.25)),\n    // eslint-disable-line no-magic-numbers\n    _q3: nanToNull(d3Quantile(dependentVars, 0.75)),\n    // eslint-disable-line no-magic-numbers\n    _min: nanToNull(d3Min(dependentVars)),\n    _median: nanToNull(d3Quantile(dependentVars, 0.5)),\n    _max: nanToNull(d3Max(dependentVars))\n  };\n  return _assign({}, data[0], quartiles, {\n    _y: data[0]._y\n  });\n};\n\nvar processData = function (data) {\n  /* check if the data is coming in a pre-processed form,\n  i.e. { x || y, min, max, q1, q3, median }. if not, process it. */\n  var isProcessed = checkProcessedData(data);\n\n  if (!isProcessed) {\n    // check if the data is coming with x or y values as an array\n    var arrayX = data.every(function (datum) {\n      return Array.isArray(datum._x);\n    });\n    var arrayY = data.every(function (datum) {\n      return Array.isArray(datum._y);\n    });\n    var sortKey = \"_y\";\n    var groupKey = \"_x\";\n\n    if (arrayX) {\n      throw new Error(\"\\n        data should not be given as in array for x\\n      \");\n    } else if (arrayY) {\n      /* generate summary statistics for each datum. to do this, flatten\n      the depedentVarArray and process each datum separately */\n      return data.map(function (datum) {\n        var dataArray = datum[sortKey].map(function (d) {\n          return _assign({}, datum, _defineProperty({}, sortKey, d));\n        });\n\n        var sortedData = _orderBy(dataArray, sortKey);\n\n        return getSummaryStatistics(sortedData);\n      });\n    } else {\n      /* Group data by independent variable and generate summary statistics for each group */\n      var groupedData = _groupBy(data, groupKey);\n\n      return _keys(groupedData).map(function (key) {\n        var datum = groupedData[key];\n\n        var sortedData = _orderBy(datum, sortKey);\n\n        return getSummaryStatistics(sortedData);\n      });\n    }\n  } else {\n    return data;\n  }\n};\n\nvar getData = function (props) {\n  var accessorTypes = TYPES.concat(\"x\", \"y\");\n  var formattedData = Data.formatData(props.data, props, accessorTypes);\n  return formattedData.length ? processData(formattedData) : [];\n};\n\nvar reduceDataset = function (dataset, props, axis) {\n  var minDomain = Domain.getMinFromProps(props, axis);\n  var maxDomain = Domain.getMaxFromProps(props, axis);\n  var minData = minDomain !== undefined ? minDomain : dataset.reduce(function (memo, datum) {\n    return memo < datum[\"_\".concat(axis)] ? memo : datum[\"_\".concat(axis)];\n  }, Infinity);\n  var maxData = maxDomain !== undefined ? maxDomain : dataset.reduce(function (memo, datum) {\n    return memo > datum[\"_\".concat(axis)] ? memo : datum[\"_\".concat(axis)];\n  }, -Infinity);\n  return Domain.getDomainFromMinMax(minData, maxData);\n};\n\nvar getDomainFromMinMaxValues = function (dataset, props, axis) {\n  var minDomain = Domain.getMinFromProps(props, axis);\n  var maxDomain = Domain.getMaxFromProps(props, axis);\n  var minData = minDomain !== undefined ? minDomain : dataset.reduce(function (memo, datum) {\n    return memo < datum._min ? memo : datum._min;\n  }, Infinity);\n  var maxData = maxDomain !== undefined ? maxDomain : dataset.reduce(function (memo, datum) {\n    return memo > datum._max ? memo : datum._max;\n  }, -Infinity);\n  return Domain.getDomainFromMinMax(minData, maxData);\n};\n\nvar getDomainFromData = function (props, axis) {\n  var minDomain = Domain.getMinFromProps(props, axis);\n  var maxDomain = Domain.getMaxFromProps(props, axis);\n  var dataset = getData(props);\n\n  if (dataset.length < 1) {\n    return minDomain !== undefined && maxDomain !== undefined ? Domain.getDomainFromMinMax(minDomain, maxDomain) : undefined;\n  }\n\n  return axis === \"y\" ? getDomainFromMinMaxValues(dataset, props, axis) : reduceDataset(dataset, props, axis);\n};\n\nvar getDomain = function (props, axis) {\n  return Domain.createDomainFunction(getDomainFromData)(props, axis);\n};\n\nvar getStyles = function (props, styleObject) {\n  var style = props.style || {};\n  styleObject = styleObject || {};\n  var parentStyles = {\n    height: \"100%\",\n    width: \"100%\"\n  };\n\n  var labelStyles = _defaults({}, style.labels, styleObject.labels);\n\n  var boxStyles = _defaults({}, style.boxes, styleObject.boxes);\n\n  var whiskerStyles = _defaults({}, style.whiskers, styleObject.whiskers);\n\n  return {\n    boxes: boxStyles,\n    labels: labelStyles,\n    parent: _defaults({}, style.parent, styleObject.parent, parentStyles),\n    max: _defaults({}, style.max, styleObject.max, whiskerStyles),\n    maxLabels: _defaults({}, style.maxLabels, styleObject.maxLabels, labelStyles),\n    median: _defaults({}, style.median, styleObject.median, whiskerStyles),\n    medianLabels: _defaults({}, style.medianLabels, styleObject.medianLabels, labelStyles),\n    min: _defaults({}, style.min, styleObject.min, whiskerStyles),\n    minLabels: _defaults({}, style.minLabels, styleObject.minLabels, labelStyles),\n    q1: _defaults({}, style.q1, styleObject.q1, boxStyles),\n    q1Labels: _defaults({}, style.q1Labels, styleObject.q1Labels, labelStyles),\n    q3: _defaults({}, style.q3, styleObject.q3, boxStyles),\n    q3Labels: _defaults({}, style.q3Labels, styleObject.q3Labels, labelStyles),\n    whiskers: whiskerStyles\n  };\n};\n\nvar getCalculatedValues = function (props) {\n  var theme = props.theme,\n      horizontal = props.horizontal;\n  var data = getData(props);\n  var range = {\n    x: Helpers.getRange(props, \"x\"),\n    y: Helpers.getRange(props, \"y\")\n  };\n  var domain = {\n    x: getDomain(props, \"x\"),\n    y: getDomain(props, \"y\")\n  };\n  var scale = {\n    x: Scale.getBaseScale(props, \"x\").domain(domain.x).range(props.horizontal ? range.y : range.x),\n    y: Scale.getBaseScale(props, \"y\").domain(domain.y).range(props.horizontal ? range.x : range.y)\n  };\n  var defaultStyles = theme && theme.boxplot && theme.boxplot.style ? theme.boxplot.style : {};\n  var style = getStyles(props, defaultStyles);\n  var defaultOrientation = props.horizontal ? \"top\" : \"right\";\n  var labelOrientation = props.labelOrientation || defaultOrientation;\n  var boxWidth = props.boxWidth || 1;\n  return {\n    data: data,\n    horizontal: horizontal,\n    domain: domain,\n    scale: scale,\n    style: style,\n    labelOrientation: labelOrientation,\n    boxWidth: boxWidth\n  };\n}; // eslint-disable-next-line complexity\n\n\nvar getWhiskerProps = function (props, type) {\n  var horizontal = props.horizontal,\n      style = props.style,\n      boxWidth = props.boxWidth,\n      whiskerWidth = props.whiskerWidth,\n      datum = props.datum,\n      scale = props.scale,\n      index = props.index;\n  var _props$positions = props.positions,\n      min = _props$positions.min,\n      max = _props$positions.max,\n      q1 = _props$positions.q1,\n      q3 = _props$positions.q3,\n      x = _props$positions.x,\n      y = _props$positions.y;\n  var boxValue = type === \"min\" ? q1 : q3;\n  var whiskerValue = type === \"min\" ? min : max;\n  var width = typeof whiskerWidth === \"number\" ? whiskerWidth : boxWidth;\n  return {\n    datum: datum,\n    index: index,\n    scale: scale,\n    majorWhisker: {\n      x1: horizontal ? boxValue : x,\n      y1: horizontal ? y : boxValue,\n      x2: horizontal ? whiskerValue : x,\n      y2: horizontal ? y : whiskerValue\n    },\n    minorWhisker: {\n      x1: horizontal ? whiskerValue : x - width / 2,\n      y1: horizontal ? y - width / 2 : whiskerValue,\n      x2: horizontal ? whiskerValue : x + width / 2,\n      y2: horizontal ? y + width / 2 : whiskerValue\n    },\n    style: style[type] || style.whisker\n  };\n};\n\nvar getBoxProps = function (props, type) {\n  var horizontal = props.horizontal,\n      boxWidth = props.boxWidth,\n      style = props.style,\n      scale = props.scale,\n      datum = props.datum,\n      index = props.index;\n  var _props$positions2 = props.positions,\n      median = _props$positions2.median,\n      q1 = _props$positions2.q1,\n      q3 = _props$positions2.q3,\n      x = _props$positions2.x,\n      y = _props$positions2.y;\n  var defaultX = type === \"q1\" ? q1 : median;\n  var defaultY = type === \"q1\" ? median : q3;\n  var defaultWidth = type === \"q1\" ? median - q1 : q3 - median;\n  var defaultHeight = type === \"q1\" ? q1 - median : median - q3;\n  return {\n    datum: datum,\n    scale: scale,\n    index: index,\n    x: horizontal ? defaultX : x - boxWidth / 2,\n    y: horizontal ? y - boxWidth / 2 : defaultY,\n    width: horizontal ? defaultWidth : boxWidth,\n    height: horizontal ? boxWidth : defaultHeight,\n    style: style[type] || style.boxes\n  };\n};\n\nvar getMedianProps = function (props) {\n  var boxWidth = props.boxWidth,\n      horizontal = props.horizontal,\n      style = props.style,\n      datum = props.datum,\n      scale = props.scale,\n      index = props.index;\n  var _props$positions3 = props.positions,\n      median = _props$positions3.median,\n      x = _props$positions3.x,\n      y = _props$positions3.y;\n  return {\n    datum: datum,\n    scale: scale,\n    index: index,\n    x1: horizontal ? median : x - boxWidth / 2,\n    y1: horizontal ? y - boxWidth / 2 : median,\n    x2: horizontal ? median : x + boxWidth / 2,\n    y2: horizontal ? y + boxWidth / 2 : median,\n    style: style.median\n  };\n};\n\nvar getText = function (props, type) {\n  var datum = props.datum,\n      index = props.index,\n      labels = props.labels;\n  var propName = \"\".concat(type, \"Labels\");\n  var labelProp = props[propName];\n\n  if (!labelProp && !labels) {\n    return null;\n  } else if (labelProp === true || labels === true) {\n    var dataName = \"_\".concat(type);\n    return \"\".concat(datum[dataName]);\n  }\n\n  return Array.isArray(labelProp) ? labelProp[index] : labelProp;\n};\n\nvar getOrientation = function (labelOrientation, type) {\n  return typeof labelOrientation === \"object\" && labelOrientation[type] || labelOrientation;\n};\n\nvar getLabelProps = function (props, text, type) {\n  var datum = props.datum,\n      positions = props.positions,\n      index = props.index,\n      boxWidth = props.boxWidth,\n      horizontal = props.horizontal,\n      labelOrientation = props.labelOrientation,\n      style = props.style;\n  var orientation = getOrientation(labelOrientation, type);\n  var namespace = \"\".concat(type, \"Labels\");\n  var labelStyle = style[namespace] || style.labels;\n  var defaultVerticalAnchors = {\n    top: \"end\",\n    bottom: \"start\",\n    left: \"middle\",\n    right: \"middle\"\n  };\n  var defaultTextAnchors = {\n    left: \"end\",\n    right: \"start\",\n    top: \"middle\",\n    bottom: \"middle\"\n  };\n  var whiskerWidth = typeof props.whiskerWidth === \"number\" ? props.whiskerWidth : boxWidth;\n  var width = type === \"min\" || type === \"max\" ? whiskerWidth : boxWidth;\n\n  var getOffset = function (coord) {\n    var sign = {\n      x: orientation === \"left\" ? -1 : 1,\n      y: orientation === \"top\" ? -1 : 1\n    };\n    return sign[coord] * width / 2 + sign[coord] * (labelStyle.padding || 0);\n  };\n\n  return {\n    text: text,\n    datum: datum,\n    index: index,\n    orientation: orientation,\n    style: labelStyle,\n    y: horizontal ? positions.y : positions[type],\n    x: horizontal ? positions[type] : positions.x,\n    dy: horizontal ? getOffset(\"y\") : 0,\n    dx: horizontal ? 0 : getOffset(\"x\"),\n    textAnchor: labelStyle.textAnchor || defaultTextAnchors[labelOrientation],\n    verticalAnchor: labelStyle.verticalAnchor || defaultVerticalAnchors[labelOrientation],\n    angle: labelStyle.angle,\n    horizontal: horizontal\n  };\n};\n\nvar getDataProps = function (props, type) {\n  if (type === \"median\") {\n    return getMedianProps(props);\n  } else if (type === \"min\" || type === \"max\") {\n    return getWhiskerProps(props, type);\n  }\n\n  return getBoxProps(props, type);\n};\n\nvar getBaseProps = function (props, fallbackProps) {\n  var modifiedProps = Helpers.modifyProps(props, fallbackProps, \"boxplot\");\n  props = _assign({}, modifiedProps, getCalculatedValues(modifiedProps));\n  var _props = props,\n      groupComponent = _props.groupComponent,\n      width = _props.width,\n      height = _props.height,\n      padding = _props.padding,\n      standalone = _props.standalone,\n      theme = _props.theme,\n      events = _props.events,\n      sharedEvents = _props.sharedEvents,\n      scale = _props.scale,\n      horizontal = _props.horizontal,\n      data = _props.data,\n      style = _props.style,\n      domain = _props.domain,\n      name = _props.name;\n  var initialChildProps = {\n    parent: {\n      domain: domain,\n      scale: scale,\n      width: width,\n      height: height,\n      data: data,\n      standalone: standalone,\n      name: name,\n      theme: theme,\n      style: style.parent || {},\n      padding: padding,\n      groupComponent: groupComponent,\n      horizontal: horizontal\n    }\n  };\n  var boxScale = scale.y;\n  return data.reduce(function (acc, datum, index) {\n    var eventKey = !_isNil(datum.eventKey) ? datum.eventKey : index;\n    var positions = {\n      x: horizontal ? scale.y(datum._y) : scale.x(datum._x),\n      y: horizontal ? scale.x(datum._x) : scale.y(datum._y),\n      min: boxScale(datum._min),\n      max: boxScale(datum._max),\n      median: boxScale(datum._median),\n      q1: boxScale(datum._q1),\n      q3: boxScale(datum._q3)\n    };\n\n    var dataProps = _assign({\n      index: index,\n      datum: datum,\n      positions: positions\n    }, props);\n\n    var dataObj = TYPES.reduce(function (memo, type) {\n      memo[type] = getDataProps(dataProps, type);\n      return memo;\n    }, {});\n    acc[eventKey] = dataObj;\n    TYPES.forEach(function (type) {\n      var labelText = getText(dataProps, type);\n      var labelProp = props.labels || props[\"\".concat(type, \"Labels\")];\n\n      if (labelText !== null && labelText !== undefined || labelProp && (events || sharedEvents)) {\n        var target = \"\".concat(type, \"Labels\");\n        acc[eventKey][target] = getLabelProps(dataProps, labelText, type);\n      }\n    });\n    return acc;\n  }, initialChildProps);\n};\n\nexport { getDomain, getData, getBaseProps };","map":null,"metadata":{},"sourceType":"module"}